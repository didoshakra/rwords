
const Words = () => {
  const [wordData, setWordData] = useState([]); //–î–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –ø–æ —Å–ø–∏—Å–∫—É
  const [wordIndex, setWordIndex] = useState(0);
  const [showTranslation, setShowTranslation] = useState(false);
  const [isStarted, setIsStarted] = useState(false);
  const [isRunning, setIsRunning] = useState(false);

    //
  const wordStartTimeRef = useRef(null); //–¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—É–¥–∏ –≤—ñ–¥–Ω–æ—Å–∏—Ç–∏ '–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é'
  //   const [isKnownEffect, setIsKnownEffect] = useState(2); //–ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –µ—Ñ–µ–∫—Ç—É "—è –∑–Ω–∞—é"
  const lastKnowRef = useRef(false); //–§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏ —Ç–µ–∫—É—á–µ —Å–ª–æ–≤–æ
  const lastKnowTimerRef = useRef(null); //–î–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è lastKnowRef —É false
  const [modalVisible, setModalVisible] = useState(false); //–í—ñ–∫–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥

  // Settings(–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —Ç–µ–º —Å–ª—ñ–≤,–∑–Ω–∞–Ω—å,–ø–∞—É–∑,)
  const {settings} = useContext(SettingsContext);
  const delayOriginal = settings?.delayOriginal ?? 2000; // –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
  const delayTranslation1 = settings?.delayTranslation1 ?? 1000; // –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è 1-–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const delayTranslation2 = settings?.delayTranslation2 ?? 1000; // –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä—É –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const delayVoiceCommand = settings?.delayVoiceCommand ?? 1000; // –ó–∞—Ç—Ä–∏–º–∫–∞ —Ä–æ—Å–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏
  const selectedTopics = settings?.selectedTopics ?? ['*']; // –í—Å—ñ —Ç–µ–º–∏/[3,5]-–¢–µ–º–∞ 3,5
  const knowFilter = settings?.knowFilter ?? '*'; // '*', '0', –∞–±–æ '1' ‚Äî —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  const enableRepeatTranslation = settings?.enableRepeatTranslation ?? true; // –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
  const stopBetweenTranslation = settings?.stopBetweenTranslation ?? false; // –∑—É–ø–∏–Ω–∫–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const allButtons = settings?.allButtons ?? true; // –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
  const showImg = settings?.showImg ?? true; // –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–æ–≤–∞
  const fromLanguage = settings?.fromLanguage ?? 'uk-UA'; //–º–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
  const toLanguage = settings?.toLanguage ?? 'en-GB'; //–º–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const startOfWordList = settings?.startOfWordList ?? '–ü–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤'; //–º–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const endOfWordList = settings?.endOfWordList ?? '–ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤'; //–º–æ–≤–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É
  // console.log('words/knowFilter=', knowFilter);

  const buttonList = [
    {
      command: 'start',
      label: '–ü–æ—á–∞—Ç–∏',
      visible: !isRunning && !isStarted, // ‚ùó –ù–ï –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ allButtons
    },
    {
      command: 'know',
      label: '–ó–Ω–∞—é',
      visible: isRunning || (allButtons && isStarted),
    },
    {
      command: 'dont_know',
      label: '–ù—ñ',
      visible: isRunning || (allButtons && isStarted),
    },
    {
      command: 'stop',
      label: '–°—Ç–æ–ø',
      visible: isRunning || (allButtons && isStarted),
    },
    {
      command: 'to_begin',
      label: '–ù–∞ –ø–æ—á–∞—Ç–æ–∫',
      visible: (!isRunning && isStarted) || (allButtons && isStarted),
    },
    {
      command: 'back',
      label: '–ù–∞–∑–∞–¥',
      visible: (!isRunning && isStarted) || (allButtons && isStarted),
    },
    {
      command: 'repeat',
      label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏',
      visible: (!isRunning && isStarted) || (allButtons && isStarted),
    },
    {
      command: 'next',
      label: '–î–∞–ª—ñ',
      visible: (!isRunning && isStarted) || (allButtons && isStarted),
    },
  ];

  // –î–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫-—Å—Ç—ñ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–µ–º
  const getSelectedLabel = () => {
    // const realTopics = topics.filter(t => t.id !== '*');
    const selectedRealTopics = selectedTopics.filter(id => id !== '*');
    const selectedTopicsAll = selectedTopics.filter(id => id == '*');
    const count = selectedRealTopics.length;

    // if (count === realTopics.length) return '–íc—ñ —Ç–µ–º–∏';
    if (selectedTopicsAll.length === 1) return ' –íc—ñ ';

    const getNounForm = number => {
      const lastTwo = number % 100;
      const last = number % 10;

      if (lastTwo >= 11 && lastTwo <= 14) return '—Ç–µ–º';
      if (last === 1) return '—Ç–µ–º–∞';
      if (last >= 2 && last <= 4) return '—Ç–µ–º–∏';
      return '—Ç–µ–º';
    };

    // return `${count} ${getNounForm(count)}`;
    return `${count} ${getNounForm(count)}`;
  };

  // üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –∑ –ë–î
  // loadWords —ñ–∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ i –∫–∞—Ä—Ç–∏–Ω–æ–∫
  const loadWords = () => {
    openDatabase().transaction(txn => {
      let query = `
            SELECT
              words.*,
              topics.img AS topic_img,
              sections.img AS section_img
            FROM words
            JOIN topics ON words.topic_id = topics.id
            JOIN sections ON topics.section_id = sections.id
          `;
      const conditions = [];

      // –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ö
      if (selectedTopics.length > 0 && !selectedTopics.includes('*')) {
        const topicPlaceholders = selectedTopics.map(() => '?').join(',');
        conditions.push(`words.topic_id IN (${topicPlaceholders})`);
      }

      // –§—ñ–ª—å—Ç—Ä –ø–æ know
      if (knowFilter === '0' || knowFilter === '1') {
        conditions.push(`words.know = ?`);
      }

      if (conditions.length > 0) {
        query += ' WHERE ' + conditions.join(' AND ');
      }

      const params = [];

      if (selectedTopics.length > 0 && !selectedTopics.includes('*')) {
        params.push(...selectedTopics);
      }

      if (knowFilter === '0' || knowFilter === '1') {
        params.push(parseInt(knowFilter));
      }

      txn.executeSql(
        query,
        params,
        (_, res) => {
          const words = [];
          for (let i = 0; i < res.rows.length; i++) {
            const item = res.rows.item(i);
            words.push({
              ...item,
              //   imagePath: `${item.section_img}/${item.topic_img}/${item.img}`, // –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            });
          }
          //   console.log('üéØ –í–∏–±—Ä–∞–Ω–æ —Å–ª—ñ–≤:', words.length);
          setWordData(words); // –∞–±–æ —ñ–Ω—à–µ state-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        },
        (_, error) => {
          console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±—ñ—Ä–∫–∏ —Å–ª—ñ–≤:', error);
        },
      );
    });
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É source –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑ imageMap (GPT)
  const getImageSource = () => {
    const word = wordData[wordIndex];
    if (!word || !word.section_img || !word.topic_img || !word.img) {
      //   return require('../../assets/word.png'); // –∑–∞–ø–∞—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      return require('../../assets/WordOnClauds.jpg'); // –∑–∞–ø–∞—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    }

    const imgName = word.img.replace('.jpg', '').trim();

    const key = `${word.section_img}/${word.topic_img}/${imgName}`;

    if (imageMap[key]) {
      return imageMap[key]; // –≥–æ—Ç–æ–≤–∏–π require
    } else {
      return require('../../assets/WordOnClauds.jpg'); // –∑–∞–ø–∞—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    }
  };

  //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
  const setVoiceCommand = cmd => {
    isVoiceCommandRef.current = cmd;
    setTimeout(() => {
      isVoiceCommandRef.current = '';
    }, 4000);//4 —Å–µ–∫
  };
  const handleCommand = command => {
    switch (command) {
      case 'start': // üß† –ü–æ—á–∞—Ç–∏ –∑ 0
        if (wordData.length === 0) return;
        // isVoiceCommandRef.current = 'start';
        setVoiceCommand('start'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        setIsStarted(true);
        setIsRunning(true);
        setWordIndex(0);
        setShowTranslation(false);
        // setIsKnownEffect(2); // –¥–ª—è –µ—Ñ–µ–∫—Ç—É "—è –∑–Ω–∞—é"

        break;
      case 'to_begin': //   üß† –ù–∞ –ø–æ—á–∞—Ç–æ–∫
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'to_begin';
        setVoiceCommand('to_begin'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        setIsStarted(false);
        setIsRunning(false);
        setWordIndex(0);
        setShowTranslation(false);
        break;

      case 'stop': // üõë –°—Ç–æ–ø
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'stop';
        setVoiceCommand('stop'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        setIsRunning(false);
        if (timerRef.current) clearTimeout(timerRef.current);
        break;

      case 'next': // ‚è≠Ô∏è –î–∞–ª—ñ –ø—ñ—Å–ª—è –°—Ç–æ–ø
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'next';
        setVoiceCommand('next'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        setIsRunning(true);
        nextWord();
        break;

      case 'repeat': //‚è≠Ô∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—ñ—Å–ª—è –°—Ç–æ–ø
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'repeat';
        setVoiceCommand('repeat'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        if (timerRef.current) clearTimeout(timerRef.current); // –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä
        setIsRunning(true);
        // setIsKnownEffect(2); // –¥–ª—è –µ—Ñ–µ–∫—Ç—É "—è –∑–Ω–∞—é"
        break;

      case 'back': // ‚è≠Ô∏è –ù–∞–∑–∞–¥ i–∑ stop
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'back';
        setVoiceCommand('back'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        setIsRunning(false);
        if (timerRef.current) clearTimeout(timerRef.current);
        backWord(); // –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞–∑–∞–¥
        break;

      case 'know': // ‚úÖ –ó–Ω–∞—é
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'know';
        setVoiceCommand('know'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        getCommandRelatedIndex(); //–§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏ —Ç–µ–∫—É—á–µ —Å–ª–æ–≤–æ
        updateWord(1); //–ó–º—ñ–Ω–∞ –≤ –ë–î
        nextWord();
        break;

      case 'dont_know': // ‚ùå –ù–µ –∑–Ω–∞—é
        if (!isStarted) return; //–í–∏—Ö—ñ–¥
        // isVoiceCommandRef.current = 'dont_know';
        setVoiceCommand('dont_know'); //–°–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∫–∞–∑—É –∫–æ–º–∞–Ω–¥–∏
        getCommandRelatedIndex(); //–§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏ —Ç–µ–∫—É—á–µ —Å–ª–æ–≤–æ
        updateWord(0); //–ó–º—ñ–Ω–∞ –≤ –ë–î
        nextWord();
        break;

      default:
        console.log('handleCommand: –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞', command);
    }
  };
  /******************************** */

  const updateWord = knowValue => {
    const index = lastKnowRef.current ? wordIndex - 1 : wordIndex;
    const word = wordData[index];
    // console.log('updateWord:', {index, word, knowValue});
    if (!word) return;

    openDatabase().transaction(tx => {
      tx.executeSql(
        'UPDATE words SET know = ? WHERE id = ?',
        [knowValue, word.id],
        () => console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ ${word.id}: know = ${knowValue}`),
        (_, error) => console.log('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', error),
      );
    });
  };

  //== –î–æ–ø–æ–º—ñ–∂–Ω—ñ =======================
  //   –û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ü—ñ–Ω–∫–∏ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –æ–∑–≤—É—á–µ–Ω–Ω—è:
  const estimateSpeechDuration = text => {
    const words = text.trim().split(/\s+/).length;
    const baseDurationPerWord = 700; // –±–∞–∑–æ–≤–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –Ω–∞ —Å–ª–æ–≤–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    const adjustmentFactor = 0.05; // –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–∫—Ü—ñ—ó –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –ø—Ä–∏ –∑–±—ñ–ª—å—à–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª—ñ–≤

    // –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –Ω–∞ —Å–ª–æ–≤–æ
    const adjustedDurationPerWord =
      baseDurationPerWord * (1 - adjustmentFactor * Math.log10(words + 1));

    // –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    return Math.max(words * adjustedDurationPerWord, 500); // –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å 500 –º—Å
  };

  //–§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏ —Ç–µ–∫—É—á–µ —Å–ª–æ–≤–æ –¥–æ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤—ñ–¥–Ω–µ—Å—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—É –≥–æ–ª–æ–≤–æ–≤—É –∫–æ–º–∞–Ω–¥—É(–º—ñ–Ω—É—Å –∑–∞—Ç—Ä–∏–º–∫–∞)
  // –°–∫–∏–¥–∞–Ω–Ω—è lastKnowRef.current = false;
  const getCommandRelatedIndex = () => {
    const now = Date.now();
    const t0 = wordStartTimeRef.current;
    const delta = now - t0;
    // const threshold = 2000; // 2 —Å–µ–∫—É–Ω–¥–∏

    if (delta < delayVoiceCommand) {
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ true —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä —Å–∫–∏–¥–∞–Ω–Ω—è
      if (!lastKnowRef.current) {
        lastKnowRef.current = true;

        // –Ø–∫—â–æ —Ä–∞–Ω—ñ—à–µ –±—É–≤ —Ç–∞–π–º–µ—Ä, –æ—á–∏—Å—Ç–∏–º–æ –π–æ–≥–æ
        if (lastKnowTimerRef.current) {
          clearTimeout(lastKnowTimerRef.current);
        }

        lastKnowTimerRef.current = setTimeout(() => {
          lastKnowRef.current = false;
          lastKnowTimerRef.current = null;
          // –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, —è–∫—â–æ —Ç—Ä–µ–±–∞
        }, delayVoiceCommand);
      }
    } else {
      // –Ø–∫—â–æ —á–∞—Å –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ - —Å–∫–∏–¥–∞—î–º–æ –≤ false —ñ –æ—á–∏—â—É—î–º–æ —Ç–∞–π–º–µ—Ä
      lastKnowRef.current = false;
      if (lastKnowTimerRef.current) {
        clearTimeout(lastKnowTimerRef.current);
        lastKnowTimerRef.current = null;
      }
    }
  };

  // –í–µ–ª–∏–∫–∞ –ø–µ—Ä—à–∞ –±—É–∫–≤–∞ —É –≤–∏—Ä–∞–∑—ñ
  function capitalizeFirstLetter(str) {
    return str[0].toUpperCase() + str.slice(1);
  }

  //===  //–î–ª—è –ø—É–ª—å—Å–∞—Ü—ñ—ó —Ñ–æ–Ω—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
  const startPulse = () => {
    // –∑—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é
    pulseAnimation.current?.stop();

    // —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É
    const newAnimation = Animated.loop(
      Animated.sequence([
        Animated.parallel([
          Animated.timing(scale, {
            toValue: 1.5,
            duration: 800,
            easing: Easing.out(Easing.ease),
            useNativeDriver: true,
          }),
          Animated.timing(opacity, {
            toValue: 0.2,
            duration: 800,
            easing: Easing.out(Easing.ease),
            useNativeDriver: true,
          }),
        ]),
        Animated.parallel([
          Animated.timing(scale, {
            toValue: 1,
            duration: 800,
            easing: Easing.in(Easing.ease),
            useNativeDriver: true,
          }),
          Animated.timing(opacity, {
            toValue: 0.7,
            duration: 800,
            easing: Easing.in(Easing.ease),
            useNativeDriver: true,
          }),
        ]),
      ]),
    );

    pulseAnimation.current = newAnimation;
    newAnimation.start();
  };

  const stopPulse = () => {
    if (pulseAnimation.current) {
      pulseAnimation.current.stop();
      pulseAnimation.current = null; // –≤–∞–∂–ª–∏–≤–æ!
    }
  };
  //=====================

  // üîä –í–∏–º–æ–≤–∞
  const speak = (text, language) => {
    Tts.stop();
    Tts.setDefaultLanguage(language);
    // Tts.setDefaultPitch(1.0); // —Ç—Ä–æ—Ö–∏ –≤–∏—â–∏–π —Ç–µ–º–±—Ä
    // Tts.setDefaultPitch(0.8); // —Ç—Ä–æ—Ö–∏ –≤–∏—â–∏–π —Ç–µ–º–±—Ä
    Tts.setDefaultRate(0.5); // —Ç—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ
    Tts.speak(text);
  };
  //== –∫ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ =======================

  //üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ settings (electedTopics, knowFilter)
  useEffect(() => {
    if (selectedTopics && knowFilter) {
      loadWords(); // –í–∏–∫–ª–∏–∫–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    }
  }, [selectedTopics, knowFilter]); // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, –ø—Ä–∏ –∑–º—ñ–Ω—ñ —è–∫–∏—Ö –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ useEffect
  useEffect(() => {
    if (isStarted) loadWords(); // –í–∏–∫–ª–∏–∫–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  }, [isStarted]); // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, –ø—Ä–∏ –∑–º—ñ–Ω—ñ —è–∫–∏—Ö –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ useEffect

  //== –¶–∏–∫–ª ==============================
  const backWord = () => {
    setShowTranslation(false);
    if (wordIndex > 0) {
      setWordIndex(prev => prev - 1);
    } else {
      setIsRunning(false);
      ToastAndroid.show('–ü–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤!', ToastAndroid.LONG);
      speak(startOfWordList, fromLanguage);
    }
  };

  const nextWord = () => {
    setShowTranslation(false);
    if (wordIndex + 1 < wordData.length) {
      setWordIndex(prev => prev + 1);
    } else {
      setIsRunning(false);
      ToastAndroid.show('–ö—ñ–Ω–µ—Ü—å —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤!', ToastAndroid.LONG);
      speak(endOfWordList, fromLanguage);
    }
  };

  //***–°–∞–º —Ü–∏–∫–ª –∑ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏
  // üó£Ô∏è –ó–º—ñ–Ω–∞ —Å–ª–æ–≤–∞ —ñ –≤–∏–º–æ–≤–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
  //üì•–í–∏–º–æ–≤–∞ —Å–ª—ñ–≤ –∑ –æ—Ü—ñ–Ω–∫–æ—é —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∑–≤—É—á–∞–Ω–Ω—è —Ä–µ—á–µ–Ω–Ω—è estimateSpeechDuration**
  useEffect(() => {
    if (!isRunning || wordData.length === 0 || wordIndex >= wordData.length)
      return;

    const current = wordData[wordIndex];

    // üìå –ó–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —á–∞—Å —Å—Ç–∞—Ä—Ç—É —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫—É–¥–∏ –≤—ñ–¥–Ω–æ—Å–∏—Ç–∏ '–∑–Ω–∞—é/–Ω–µ –∑–Ω–∞—é'
    wordStartTimeRef.current = Date.now();

    Tts.setDefaultPitch(1.0); // —Ç—Ä–æ—Ö–∏ –≤–∏—â–∏–π —Ç–µ–º–±—Ä
    speak(current.word, fromLanguage);

    const durationOriginal = estimateSpeechDuration(current.word);

    timerRef.current = setTimeout(() => {
      setShowTranslation(true);
    }, durationOriginal + delayOriginal);

    return () => clearTimeout(timerRef.current);
  }, [wordIndex, isRunning]);

  // üó£Ô∏è –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É
  useEffect(() => {
    if (
      !isRunning ||
      !showTranslation ||
      wordData.length === 0 ||
      wordIndex >= wordData.length
    )
      return;

    const current = wordData[wordIndex];
    // Tts.setDefaultPitch(1.1); // —Ç—Ä–æ—Ö–∏ –≤–∏—â–∏–π —Ç–µ–º–±—Ä
    speak(current.translation, toLanguage);

    const durationTranslation = estimateSpeechDuration(current.translation);

    // –ü–µ—Ä—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ ‚Äî –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
    timerRef.current = setTimeout(() => {
      if (enableRepeatTranslation) {
        // Tts.setDefaultPitch(0.9); // —Ç—Ä–æ—Ö–∏ –≤–∏—â–∏–π —Ç–µ–º–±—Ä
        speak(current.translation, toLanguage);

        // ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
        timerRef.current = setTimeout(() => {
          if (!stopBetweenTranslation) {
            nextWord(); // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ –∑—É–ø–∏–Ω–∫–∏
          } else {
            setIsRunning(false);
          }
        }, durationTranslation + delayTranslation2);
      } else {
        if (!stopBetweenTranslation) {
          nextWord(); // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –±–µ–∑ –∑—É–ø–∏–Ω–∫–∏
        } else {
          setIsRunning(false);
        }
      }
    }, durationTranslation + delayTranslation1);

    return () => clearTimeout(timerRef.current);
    //   }, [showTranslation, isRunning]);
  }, [
    showTranslation,
    isRunning,
    wordIndex,
    // wordData,
    // toLanguage,
    // enableRepeatTranslation,
    // stopBetweenTranslation,
    // delayTranslation1,
    // delayTranslation2, // üëà –¥–æ–¥–∞–Ω–æ
  ]);
  //== –∫ —Ü–∏–∫–ª ==========================

  // –¥–ª—è Voice --------------------------------------------------------
  const handleCloseModal = () => {
    setModalVisible(false);
  };

  const handleVoice = useCallback(
    intent => {
      //   getCommandRelatedIndex(); //–§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—î —á–∏ —Ç–µ–∫—É—á–µ —Å–ª–æ–≤–æ
      switch (intent) {
        case 'to_begin':
          handleCommand('to_begin');
          break;
        case 'start':
          handleCommand('start');
          break;
        case 'stop':
          handleCommand('stop');
          break;
        case 'repeat':
          handleCommand('repeat');
          break;
        case 'back':
          handleCommand('back');
          break;
        case 'next':
          handleCommand('next');
          break;
        case 'know':
          handleCommand('know');
          break;
        case 'dont_know':
          handleCommand('dont_know');
          break;
        default:
          console.log(`–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${intent}`);
      }
    },
    [handleCommand],
  );


  // -------------------------------






  useFocusEffect(
    useCallback(() => {
      const onBackPress = () => {
        stopAll(); // —Ç—É—Ç –∑—É–ø–∏–Ω—è–π –≤—Å–µ
        navigation.replace('Home');
        return true;
      };

      const sub = BackHandler.addEventListener(
        'hardwareBackPress',
        onBackPress,
      );
      return () => sub.remove();
    }, []),
  );

  // ===============================================
  return (
    <View
      style={{
        flex: 1,
        paddingTop: insets.top,
        paddingBottom: insets.bottom,
        paddingLeft: insets.left,
        paddingRight: insets.right,
        backgroundColor: cPageBorderBg,
      }}>
      <StatusBar
        barStyle={isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor={cStatusBarBg}
        color={cStatusBarOn}
      />
      {/*  */}
      {!isStarted && <RTopBar pcBg={cTopBarBg} pcOn={cTopBarOn} />}
      {/*  */}

        {/* Body of the page */}
        <View style={styles.bodyPageContainer}>
          
          {/* Words */}
          <View style={[styles.wordsContainer, {flexDirection: flexDir}]}>
            {isStarted ? (
              <>
                {showImg && (
                  // {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ */}
                  <View
                    style={[
                      styles.wordTextContainer,
                      {
                        flex: 2,
                        backgroundColor: cOutputBg,
                        borderColor: cOutputBorder,
                      },
                    ]}>
                    {/* getImageSource-–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É source –∫–∞—Ä—Ç–∏–Ω–∫–∏ GPT */}
                    <Image source={getImageSource()} style={styles.wordImage} />
                  </View>
                )}
                {/* –û—Ä–∏–≥—ñ–Ω–∞–ª/–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º lastKnowRef  */}
                <View
                  style={[
                    styles.wordTextContainer,
                    {
                      flex: 2,
                      backgroundColor: cOutputBg,

                    },
                  ]}>
                  <Text
                    style={[
                      styles.wordText,
                      {
                        color:
                          wordData[wordIndex].know === 1 ? cKnownText : cPageOn,
                        // color:
                        //   wordData[wordIndex].know === 1
                        //     ? cKnownText
                        //     : wordData[wordIndex].know === 0
                        //     ? cDontKnownText
                        //     : cPageOn,
                      },
                    ]}>
                    {capitalizeFirstLetter(wordData[wordIndex]?.word || '')}
                  </Text>
                </View>

                {/* –ü–µ—Ä–µ–∫–ª–∞–¥ */}
                <View
                  style={[
                    styles.wordTextContainer,
                    {
                      flex: 2,
                      backgroundColor: cOutputBg,
                      borderColor: cOutputBorder,
                    },
                  ]}>
                  {showTranslation ? (
                    <Text style={[styles.wordText, {color: cPageOn}]}>
                      {wordData[wordIndex].translation}
                    </Text>
                  ) : (
                    <Text style={[styles.wordText, {color: cPageOn}]}>?</Text>
                  )}
                </View>
              </>
            ) : (
              <>
                <View style={styles.startContaner}>
                  <Text style={{color: cLoadText}}>
                    üéØ –í–∏–±—Ä–∞–Ω–æ —Å–ª—ñ–≤: {wordData.length}
                  </Text>
                  <Text style={{color: cLoadText}}>
                    üéØ –í–∏–±—Ä–∞–Ω—ñ —Ç–µ–º–∏: {getSelectedLabel()}
                    {/* üéØ –í–∏–±—Ä–∞–Ω—ñ —Ç–µ–º–∏: {selectedTopics} */}
                  </Text>
                  <Text style={{color: cLoadText}}>
                    üéØ –í–∏–±—Ä–∞–Ω—ñ –∑–Ω–∞–Ω–Ω—è:
                    {knowFilter === '1'
                      ? ' –∑–Ω–∞—é'
                      : knowFilter === '0'
                      ? ' –Ω–µ –∑–Ω–∞—é'
                      : '–í—Å—ñ'}
                  </Text>
                </View>
                <View style={styles.startContaner}>
                  <Text style={[styles.wordText, {color: cPageOn}]}>
                    –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ—á–∞—Ç–∏"
                  </Text>
                </View>
              </>
            )}
          </View>
          {/* Buttons */}
          <View style={styles.buttonsContainer}>
            {buttonList
              .filter(btn => btn.visible)
              .map(btn => (
                <TouchableOpacity
                  key={btn.command}
                  style={[styles.button, buttonColorStyle]}
                  onPress={() => handleCommand(btn.command)}>
                  <Text style={buttonTextStyle}>{btn.label}</Text>
                </TouchableOpacity>
              ))}
          </View>
        </View>
      </View>

    </View>
  );
};
export default Words;

