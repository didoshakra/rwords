// words/page_tw.jsx
//
"use client"

import React, { useEffect, useState, useTransition, useRef } from "react"
import {
  getWords,
  createWord,
  updateWord,
  deleteWord,
  deleteWords,
  updateWordPn,
  importCSV,
  translateWord,
} from "@/app/actions/wordActions"
import { getSections } from "@/app/actions/sectionActions"
import { getTopics } from "@/app/actions/topicActions"
import { useAuth } from "@/app/context/AuthContext"
import MoveRowModal from "@/app/components/tables/MoveRowModal"
import TableView from "@/app/components/tables/TableView"

function Modal({ open, onClose, children }) {
  if (!open) return null
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-white rounded-xl p-6 min-w-[320px] relative shadow-xl">
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-xl"
          aria-label="Close modal"
        >
          √ó
        </button>
        {children}
      </div>
    </div>
  )
}

//–î–ª—è TableView
const columns = [
  {
    label: "‚Ññ–ø",
    accessor: "pn",
    type: "integer",
    width: 50,
    styleCell: { alignItems: "center" },
    //   styleCellText: {color: 'green'},
    markIfOwner: true, // üöÄ –Ω–æ–≤–µ –ø–æ–ª–µ
  },
  {
    label: "–ó–Ω",
    accessor: "know",
    type: "boolean",
    type: "know",
    width: 50,
    styleCell: { alignItems: "center" },
    styleCellText: { color: "red" },
  },
  {
    label: "–°–ª–æ–≤–∞ / –≤–∏—Ä–∞–∑–∏",
    accessor: "word",
    type: "text",
    width: 250,
    styleCellText: { fontWeight: 600 },
  },
  { label: "–ü–µ—Ä–µ–∫–ª–∞–¥", accessor: "translation", type: "text", width: 250 },

  // {label: '–ü–µ—Ä–µ–∫–ª–∞–¥', accessor: 'translation', type: 'text', width: 250},
  { label: "–¢–µ–º–∞", accessor: "topic_name", type: "text", width: 250 },
  { label: "–°–µ–∫—Ü—ñ—è", accessor: "section_name", type: "text", width: 250 },

  { label: "–§–∞–π–ª img", accessor: "img", type: "text", width: 150 },
  {
    label: "‚Ññs",
    accessor: "section_pn",
    type: "integer",
    width: 50,
    styleCell: { alignItems: "center" },
  },
  {
    label: "‚Ññt",
    accessor: "topic_pn",
    type: "integer",
    width: 50,
    styleCell: { alignItems: "center" },
  },

  {
    label: "id",
    accessor: "id",
    type: "integer",
    width: 60,
    styleCell: { alignItems: "center" },
    //   styleCellText: {color: 'green'},
  },
  {
    label: "Tid",
    accessor: "topic_id",
    type: "integer",
    width: 40,
    styleCell: { alignItems: "center" },
  },
]

export default function WordsPage() {
  // prors
  const showOwnerMark = true

  const { user } = useAuth()
  const [words, setWords] = useState([])
  const [topics, setTopics] = useState([])
  const [sections, setSections] = useState([])
  const [modal, setModal] = useState(null) // null | {type, word}
  const [id, setId] = useState(null)
  const [word, setWord] = useState("")
  const [translation, setTranslation] = useState("")
  const [topic_id, setTopicId] = useState("")
  const [pn, setPn] = useState("")
  const [know, setKnow] = useState(false)
  const [img, setImg] = useState("")
  const [message, setMessage] = useState("")
 // startTransition	–í–∏–∫–æ–Ω–∞—Ç–∏ –≤–∞–∂–∫—ñ –∞–±–æ –º–µ–Ω—à –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è UI
   const [isPending, startTransition] = useTransition() // isPending	–ü–æ–∫–∞–∑–∞—Ç–∏ loader / disabled//
  const [isOrderChanged, setIsOrderChanged] = useState(false) //–î–ª—è –ø–æ—Ä–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –ø–æ—Ä—è–¥–∫—É
  // –°—Ç–∞–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (useState —Ç–∞ useRef)
  const [translate, setTranslate] = useState(false)
  const [translatedCount, setTranslatedCount] = useState(0)
  const [totalWords, setTotalWords] = useState(0)
  const stopRequested = useRef(false)
  const translatedCountRef = useRef(0)
  const [selectedIds, setSelectedIds] = useState([]) //
  //   –î–ª—è –º–æ–¥–∞–ª–∫–∏ —Å—Ç—Ä—ñ–ª–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  const [moveMode, setMoveMode] = useState(false)
  const [moveInfo, setMoveInfo] = useState(null) // { idx, total }
  const rowRefs = useRef([]) //–î–ª—è —Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ
  //   –î–ª—è —Ä–æ–≥–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø(—Å–µ–∫—Ü—ñ–π)
  const [openSections, setOpenSections] = useState([])
  const [openTopics, setOpenTopics] = useState(topics.map((t) => t.id)) // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ

  //  –í—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —è–∫—ñ –º–∞—é—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—å –≤ –º–∞–π–±—É—Ç–Ω—ñ–π TableView
  const level1Head = "–ì—Ä—É–ø–∞ —Ç–µ–º:"
  const level2Head = "–¢–µ–º–∞:"

  const fromLanguage = "uk"
  const toLanguage = "en"

  useEffect(() => {
    loadWords()
    loadTopics()
    loadSections()
  }, [])

  const loadWords = () => {
    getWords()
      .then(setWords)
      .catch((err) => setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message))
  }

  const loadTopics = () => {
    getTopics()
      .then(setTopics)
      .catch(() => setTopics([]))
  }
  const loadSections = () => {
    getSections()
      .then(setSections)
      .catch(() => setSections([]))
  }

  const openAddModal = () => {
    setId(null)
    setWord("")
    setTranslation("")
    setTopicId("")
    setPn("")
    setKnow(false)
    setImg("")
    setModal({ type: "add" })
    setMessage("")
  }

  const openEditModal = (w) => {
    setId(w.id)
    setWord(w.word)
    setTranslation(w.translation)
    setTopicId(w.topic_id.toString())
    setPn(w.pn.toString())
    setKnow(w.know)
    setImg(w.img || "")
    setModal({ type: "edit", word: w })
    setMessage("")
  }

  const closeModal = () => {
    setModal(null)
    setId(null)
    setWord("")
    setTranslation("")
    setTopicId("")
    setPn("")
    setKnow(false)
    setImg("")
    setMessage("")
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!user) return setMessage("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
    if (!word.trim() || !translation.trim()) return setMessage("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–ª–æ–≤–æ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥")
    if (!topic_id) return setMessage("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–ø—ñ–∫")

    const data = {
      word: word.trim(),
      translation: translation.trim(),
      topic_id: Number(topic_id),
      pn: pn ? Number(pn) : 0,
      know,
      img: img.trim(),
    }

    startTransition(async () => {
      try {
        if (modal?.type === "edit") {
          //   await updateWord(id, data, user)
          await updateWord(id, data, user?.id, user?.role)
          setMessage("–°–ª–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        } else {
          await createWord(data, user?.id)
          setMessage("–°–ª–æ–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        }
        closeModal()
        loadWords()
      } catch (err) {
        setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message)
      }
    })
  }

  const handleDelete = (w) => {
    if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ —Å–ª–æ–≤–æ?")) return
    startTransition(async () => {
      try {
        await deleteWord(w.id, user?.id, user?.role)
        setMessage("–°–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
        loadWords()
      } catch (err) {
        setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message)
      }
    })
  }

  //GPT/ –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤

  const saveOrder = async () => {
    if (!user) return

    if (user.role !== "admin") {
      alert("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ —É—Å—ñ—Ö —Å–ª—ñ–≤ –º–æ–∂–µ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
      return
    }

    try {
      for (let i = 0; i < words.length; i++) {
        const w = words[i]
        const newPn = i + 1
        if (w.pn !== newPn) {
          await updateWordPn(w.id, newPn, user?.id, user?.role)
        }
      }
      setMessage("‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
      setTimeout(() => setMessage(""), 2000)
      setIsOrderChanged(false)
      loadWords()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  const updatePNs = (updatedWords) => {
    const newWords = updatedWords.map((w, i) => ({
      ...w,
      pn: i + 1, // –æ–Ω–æ–≤–ª—é—î–º–æ pn
    }))
    setWords(newWords)
    setIsOrderChanged(true) // ‚ö†Ô∏è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–º—ñ–Ω
  }

  const isOwnerOrAdmin = (w) => user && (user.role === "admin" || user.id === w.user_id)

  //–î–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∞–±–æ –ø—Ä–∏–∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (isOrderChanged) {
        e.preventDefault()
        e.returnValue = "" // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –¥–µ—è–∫–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
      }
    }

    window.addEventListener("beforeunload", handleBeforeUnload)

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload)
    }
  }, [isOrderChanged])

  // –Ü–º–ø–æ—Ä—Ç –∑ csv
  const handleFileUpload = async (event) => {
    const file = event.target.files[0]
    if (!file) return

    setMessage("")
    startTransition(async () => {
      try {
        const text = await file.text()
        // –í–∏–∫–ª–∏–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó action-—Ñ—É–Ω–∫—Ü—ñ—ó importCSV, —è–∫—É —Ç—Ä–µ–±–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
        const result = await importCSV(text, user?.id, user?.role)
        setMessage(result)
        loadWords()
      } catch (error) {
        setMessage(error.message || "–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É")
      }
      // –û—á–∏—â—É—î–º–æ input, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –∑–Ω–æ–≤—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª, —è–∫—â–æ —Ç—Ä–µ–±–∞
      event.target.value = null
    })
  }

  const translateAllWords = async () => {
    stopRequested.current = false
    setTranslate(true)
    setTranslatedCount(0)
    translatedCountRef.current = 0

    let allWords
    try {
      allWords = await getWords()
    } catch (err) {
      alert("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ª–æ–≤–∞ –∑ –ë–î.")
      setTranslate(false)
      return
    }

    const untranslatedWords = allWords.filter((w) => !w.translation?.trim())

    if (allWords.length === 0) {
      setTranslate(false)
      alert("‚ö†Ô∏è –£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.")
      return
    }

    const ask = confirm(
      untranslatedWords.length < allWords.length
        ? "–î–µ—è–∫—ñ —Å–ª–æ–≤–∞ –≤–∂–µ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ. –ü–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –≤—Å—ñ?"
        : "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞?"
    )

    const wordsToTranslate = untranslatedWords.length < allWords.length && !ask ? untranslatedWords : allWords

    startTranslation(wordsToTranslate)
  }

  const startTranslation = async (wordsToTranslate) => {
    setTotalWords(wordsToTranslate.length)
    if (wordsToTranslate.length === 0) {
      setTranslate(false)
      return
    }

    for (let i = 0; i < wordsToTranslate.length; i++) {
      if (stopRequested.current) {
        alert(`‚è∏ –ó—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ ${i} —ñ–∑ ${wordsToTranslate.length} —Å–ª—ñ–≤`)
        setTranslate(false)
        loadWords?.()
        return
      }

      const word = wordsToTranslate[i].word
      const id = wordsToTranslate[i].id

      try {
        await translateWord(word, fromLanguage, toLanguage) // server action
        setTranslatedCount((prev) => prev + 1)
        translatedCountRef.current++
      } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É:", word, err)
      }

      await new Promise((res) => setTimeout(res, 400)) // –ø–∞—É–∑–∞
    }

    alert(`‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${translatedCountRef.current} —ñ–∑ ${wordsToTranslate.length}`)
    setTranslate(false)
    loadWords?.()
  }
  //   -------------------------------------------

  // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const handleTranslate = () => {
    if (!translate) {
      translateAllWords()
    } else {
      stopRequested.current = true
      setTranslate(false)
    }
  }

  const deleteSelected = async () => {
    if (!user) {
      alert("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, —â–æ–± –≤–∏–¥–∞–ª—è—Ç–∏ —Å–ª–æ–≤–∞")
      return
    }
    if (selectedIds.length === 0) return
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ª–æ–≤–∞ –∑–∞ id
    const selectedWords = words.filter((w) => selectedIds.includes(w.id))

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Å–ª–æ–≤–∞ –Ω–∞–ª–µ–∂–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const ownWords = selectedWords.filter((w) => user.role === "admin" || w.user_id === user.id)
    const ownIds = ownWords.map((w) => w.id)
    const othersCount = selectedWords.length - ownWords.length

    if (ownIds.length === 0) {
      // –ù–µ–º–∞ —Å–≤–æ—ó—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      alert("–£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞–ª–µ–∂–∞—Ç—å —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. –í–∏–¥–∞–ª—è—Ç–∏ –Ω—ñ—á–æ–≥–æ.")
      return
    }

    if (othersCount > 0) {
      const confirmed = confirm(
        `–£ –≤–∏–±–æ—Ä—ñ —î ${othersCount} —á—É–∂–∏—Ö —Å–ª—ñ–≤. –í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—à–µ –≤–∞—à—ñ (${ownIds.length})? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—ó, –∞–±–æ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.`
      )
      if (!confirmed) return
    } else {
      const confirmed = confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${ownIds.length} —Å–ª—ñ–≤?`)
      if (!confirmed) return
    }

    try {
      await deleteWords(ownIds, user?.id, user?.role)
      setMessage(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${ownIds.length} —Å–ª—ñ–≤`)
      clearSelection()
      loadWords()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  //   const isSelected = (id) => selectedIds.includes(id)

  //   const toggleSelect = (id) => {
  //     setSelectedIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]))
  //   }

  //   const selectAll = () => {
  //     setSelectedIds(words.map((w) => w.id))
  //   }

  const clearSelection = () => {
    setSelectedIds([])
  }
  //   –î–ª—è –º–æ–¥–∞–ª–∫–∏ —Å—Ç—Ä—ñ–ª–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  //   const startMoveMode = () => {
  //     if (selectedIds.length !== 1) return

  //     const id = selectedIds[0]
  //     const idx = words.findIndex((w) => w.id === id)
  //     if (idx === -1) return

  //     setMoveInfo({ idx, total: words.length })
  //     scrollRowIntoView(idx) //–î–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª—É
  //     setMoveMode(true)
  //   }
  //   –î–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ
  //   const scrollRowIntoView = (rowIndex) => {
  //     const container = document.querySelector(".table-container") // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ overflow-auto, —â–æ –æ–±–≥–æ—Ä—Ç–∞—î —Ç–∞–±–ª–∏—Ü—é
  //     if (!container) return

  //     const rows = container.querySelectorAll("tbody tr")
  //     if (!rows[rowIndex]) return

  //     const row = rows[rowIndex]

  //     const containerTop = container.scrollTop
  //     const containerBottom = containerTop + container.clientHeight

  //     const rowTop = row.offsetTop
  //     const rowBottom = rowTop + row.offsetHeight

  //     if (rowTop < containerTop) {
  //       // —Ä—è–¥–æ–∫ –≤–∏—â–µ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ, —Å–∫—Ä–æ–ª–∏–º–æ –Ω–∞–≤–µ—Ä—Ö, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –π–æ–≥–æ
  //       container.scrollTop = rowTop
  //     } else if (rowBottom > containerBottom) {
  //       // —Ä—è–¥–æ–∫ –Ω–∏–∂—á–µ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ, —Å–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑
  //       container.scrollTop = rowBottom - container.clientHeight
  //     }
  //   }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤ –º–∞—Å–∏–≤—ñ words –≤ —Å—Ç–∞–Ω—ñ:
  const moveSelectedRow = (direction) => {
    if (!moveInfo) return

    const { idx } = moveInfo
    const topicId = words[idx].topic_id

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ü—å–æ–≥–æ topic
    const topicWords = words.filter((w) => w.topic_id === topicId)
    const topicIndexes = topicWords.map((w) => words.findIndex((x) => x.id === w.id))
    const localIdx = topicIndexes.indexOf(idx)

    let newIdx = idx

    // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –≥—Ä—É–ø–∏
    if (direction === "up" && localIdx > 0) {
      newIdx = topicIndexes[localIdx - 1]
    } else if (direction === "down" && localIdx < topicIndexes.length - 1) {
      newIdx = topicIndexes[localIdx + 1]
    }

    if (newIdx === idx) return // –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É —Ç–∞ –º—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏
    let updatedWords = [...words]
    ;[updatedWords[idx], updatedWords[newIdx]] = [updatedWords[newIdx], updatedWords[idx]]

    // –û–Ω–æ–≤–ª—é—î–º–æ pn
    const newWordsWithPN = updatedWords.map((w, i) => ({ ...w, pn: i + 1 }))

    setWords(newWordsWithPN)
    setIsOrderChanged(true)

    // –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ: –æ–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ idx, —ñ–Ω—à—ñ –ø–æ–ª—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è
    setMoveInfo((prev) => ({ ...prev, idx: newIdx }))

    // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    if (rowRefs.current[newIdx]) {
      rowRefs.current[newIdx].scrollIntoView({
        behavior: "smooth",
        block: "nearest",
      })
    }
  }

  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø
  //   const toggleSection = (sectionId) => {
  //     setOpenSections((prev) => (prev.includes(sectionId) ? prev.filter((id) => id !== sectionId) : [...prev, sectionId]))
  //   }
  //   //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø
  //   const toggleTopic = (topicId) => {
  //     setOpenTopics((prev) => (prev.includes(topicId) ? prev.filter((id) => id !== topicId) : [...prev, topicId]))
  //   }
  // //   console.log("words/page/words=", words)
  // //   console.log("words/page/dataLevel1=", topics)
  // //   console.log("words/page/dataLevel2=", sections)

  return (
    <main className="p-6 max-w-4xl mx-auto">
      {/* {topics.length > 0 && sections.length > 0 && ( */}
      <TableView
        data={words}
        dataLevel1={topics}
        dataLevel2={sections}
        sewords={setWords}
        // onSavePn={updateWordsPn}
        columns={columns}
        title={"–°–ª–æ–≤–∞TW1"}
        //   colorsTable={colorsTable}
        // indexScheme={indexScheme} //–∫–æ–ª—ñ—Ä
        onAdd={openAddModal}
        onEdit={() => openEditModal(selectedWord)}
        onDelete={() => handleDelete(selectedWord)} // –ø–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ id
        onClickCsv={() => document.getElementById("csvInput").click()}
        onTranslate={handleTranslate}
        translate={translate} //–ß–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ –¥–ª—è –∑–º—ñ–Ω–∏ –∫–Ω–æ–ø–∫–∏
        level1Head="–¢–µ–º–∞"
        level2Head="–°–µ–∫—Ü—ñ—è"
        // sectionId={"section_id"} //üîí –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥–æ –ø–µ–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–ª—è
        // sectionName={"section_name"} //–ù–∞–∑–≤–∞ —Å–µ–∫—Ü—ñ—ó
        // beforeSectionName={"–¢–µ–º–∞"} // –ù–∞–∑–≤–∞ –ø–µ—Ä–µ–¥: –Ω–∞–∑–≤–æ—é —Å–µ–∫—Ü—ñ—ó
        sortField={"pn"} //–ø–æ–ª–µ –¥–ª—è –ø–æ—Ä—è–¥–∫—É
        isPending={isPending} //–î–õ—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —ñ–º–ø–æ—Ä—Ç –ø–æ–∫–∏–π–¥–µ —ñ–º–ø–æ—Ä—Ç
      />
      {/* )} */}
      <input type="file" id="csvInput" accept=".csv,text/csv" style={{ display: "none" }} onChange={handleFileUpload} />
      <MoveRowModal
        open={moveMode}
        onClose={() => setMoveMode(false)}
        moveInfo={moveInfo}
        moveSelectedRow={moveSelectedRow}
      />
    </main>
  )
}
