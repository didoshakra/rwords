// words/page.js
//
"use client"

import React, { useEffect, useState, useTransition, useRef } from "react"
import { getWords, createWord, updateWord, deleteWords, importCSV, translateWord } from "@/app/actions/wordActions"
import { getSections } from "@/app/actions/sectionActions"
import { getTopics } from "@/app/actions/topicActions"
import { useSession } from "next-auth/react"
import TableView from "@/app/components/tables/TableView"
import CustomDialog from "@/app/components/dialogs/CustomDialog"
import { useAuth } from "@/app/context/AuthContext" //–ß–∏ –≤—Ö—ñ–¥ –∑ –¥–æ–¥–∞—Ç–∫—É
import { incrementWordDownloads } from "@/app/actions/statsActions"

function Modal({ open, onClose, children }) {
  if (!open) return null
  return (
    <div className="fixed inset-0 z-50 flex ite             ms-center justify-center bg-black/50">
      <div className="bg-white rounded-xl p-6 min-w-[320px] relative shadow-xl">
        <button
          onClick={onClose}
          className="absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-xl"
          aria-label="Close modal"
        >
          √ó
        </button>
        {children}
      </div>
    </div>
  )
}

//–î–ª—è TableView
const columns = [
//   {
//     label: "‚Ññ–ø",
//     accessor: "pn",
//     type: "integer",
//     width: 50,
//     styleCell: { alignItems: "center" },
//     markIfOwner: true, // üöÄ –Ω–æ–≤–µ –ø–æ–ª–µ
//   },
//   {
//     label: "–ó–Ω",
//     accessor: "know",
//     type: "boolean",
//     type: "know",
//     width: 50,
//     styleCell: { alignItems: "center" },
//     styleCellText: { color: "red" },
//   },
  {
    label: "–°–ª–æ–≤–∞",
    accessor: "word",
    type: "text",
    width: 250,
    // styleCellText: { fontWeight: 600 },
  },
  { label: "–ü–µ—Ä–µ–∫–ª–∞–¥", accessor: "translation", type: "text", width: 250 },

//   { label: "–¢–µ–º–∞", accessor: "topic_name", type: "text", width: 250 },
//   { label: "–°–µ–∫—Ü—ñ—è", accessor: "section_name", type: "text", width: 250 },

//   { label: "–§–∞–π–ª img", accessor: "img", type: "text", width: 150 },
//   {
//     label: "‚Ññs",
//     accessor: "section_pn",
//     type: "integer",
//     width: 50,
//     styleCell: { alignItems: "center" },
//   },
//   {
//     label: "‚Ññt",
//     accessor: "topic_pn",
//     type: "integer",
//     width: 50,
//     styleCell: { alignItems: "center" },
//   },

//   {
//     label: "id",
//     accessor: "id",
//     type: "integer",
//     width: 60,
//     styleCell: { alignItems: "center" },
//     //   styleCellText: {color: 'green'},
//   },
//   {
//     label: "Tid",
//     accessor: "topic_id",
//     type: "integer",
//     width: 40,
//     styleCell: { alignItems: "center" },
//   },
]

export default function WordsPage() {
  // prors
  const { isFromApp } = useAuth() //–ß–∏ –≤—Ö—ñ–¥ –∑ –¥–æ–¥–∞—Ç–∫—É
  const { data: session, status } = useSession()
  const user = session?.user
  const [words, setWords] = useState([])
  const [topics, setTopics] = useState([])
  const [sections, setSections] = useState([])
  const [modal, setModal] = useState(null) // null | {type, word}
  const [id, setId] = useState(null)
  const [word, setWord] = useState("")
  const [translation, setTranslation] = useState("")
  const [topic_id, setTopicId] = useState("")
  const [pn, setPn] = useState("")
  const [know, setKnow] = useState(false)
  const [img, setImg] = useState("")
  const [message, setMessage] = useState("")
  const [isPending, startTransition] = useTransition() // isPending	–ü–æ–∫–∞–∑–∞—Ç–∏ loader / disabled//
  // –°—Ç–∞–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (useState —Ç–∞ useRef)
  const [translate, setTranslate] = useState(false)
  const stopRequested = useRef(false)
  const translatedCountRef = useRef(0)
  const [actionsOk, setActionsOk] = useState(false) //–î–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–∫—Ü—ñ–π(delete)
  const [dialogOpen, setDialogOpen] = useState(false)
  const [dialogConfig, setDialogConfig] = useState({})
  //  –í—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —è–∫—ñ –º–∞—é—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—å –≤ –º–∞–π–±—É—Ç–Ω—ñ–π TableView
  const fromLanguage = "uk"
  const toLanguage = "en"

  useEffect(() => {
    loadWords()
    loadTopics()
    loadSections()
  }, [])

  const loadWords = () => {
    getWords()
      .then(setWords)
      .catch((err) => setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message))
  }

  const loadTopics = () => {
    getTopics()
      .then(setTopics)
      .catch(() => setTopics([]))
  }
  const loadSections = () => {
    getSections()
      .then(setSections)
      .catch(() => setSections([]))
  }

  const openAddModal = () => {
    console.log("words/openAddModal")
    setId(null)
    setWord("")
    setTranslation("")
    setTopicId("")
    setPn("")
    setKnow(false)
    setImg("")
    setModal({ type: "add" })
    setMessage("")
  }

  const openEditModal = (w) => {
    setId(w.id)
    setWord(w.word)
    setTranslation(w.translation)
    setTopicId(w.topic_id.toString())
    setPn(w.pn.toString())
    setKnow(w.know)
    setImg(w.img || "")
    setModal({ type: "edit", word: w })
    setMessage("")
  }

  const closeModal = () => {
    setModal(null)
    setId(null)
    setWord("")
    setTranslation("")
    setTopicId("")
    setPn("")
    setKnow(false)
    setImg("")
    setMessage("")
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!user) return setMessage("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
    if (!word.trim()) return setMessage("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Å–ª–æ–≤–æ ")
    if (!topic_id) return setMessage("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–ø—ñ–∫")

    const data = {
      word: word.trim(),
      translation: translation.trim(),
      topic_id: Number(topic_id),
      pn: pn ? Number(pn) : 0,
      know,
      img: img.trim(),
    }

    startTransition(async () => {
      try {
        if (modal?.type === "edit") {
          //   await updateWord(id, data, user)
          await updateWord(id, data, user?.id, user?.role)
          setMessage("–°–ª–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        } else {
          await createWord(data, user?.id)
          setMessage("–°–ª–æ–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        }
        closeModal()
        loadWords()
      } catch (err) {
        setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message)
      }
    })
  }

  const handleDelete = (words) => {
    setDialogConfig({
      type: "delete",
      title: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
      message: `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ ${words.length} —Å–ª—ñ–≤?`,
      buttons: [
        { label: "–í–∏–¥–∞–ª–∏—Ç–∏", className: "bg-red-600 text-white" },
        { label: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", className: "bg-gray-200" },
      ],
      wordsToDelete: words, // –¥–æ–¥–∞—Ç–∫–æ–≤–æ, —è–∫—â–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –¥–∞–Ω—ñ
    })
    setDialogOpen(true)
  }

  const updatePNs = (updatedWords) => {
    const newWords = updatedWords.map((w, i) => ({
      ...w,
      pn: i + 1, // –æ–Ω–æ–≤–ª—é—î–º–æ pn
    }))
    setWords(newWords)
    setIsOrderChanged(true) // ‚ö†Ô∏è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–º—ñ–Ω
  }

  //   const isOwnerOrAdmin = (w) => user && (user.role === "admin" || user.id === w.user_id)

  // –Ü–º–ø–æ—Ä—Ç –∑ csv
  const handleFileUpload = async (event) => {
    console.log("words/handleFileUpload")
    const file = event.target.files[0]
    if (!file) return
    console.log("words/handleFileUpload/")
    setMessage("–ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É...")
    startTransition(async () => {
      try {
        const text = await file.text()
        // –í–∏–∫–ª–∏–∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó action-—Ñ—É–Ω–∫—Ü—ñ—ó importCSV, —è–∫—É —Ç—Ä–µ–±–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
        // const result = await importCSV(text, user?.id, user?.role)
        const result = await importCSV(text, user?.id)
        setMessage(result)
        loadWords()
        loadTopics()
        loadSections()
      } catch (error) {
        setMessage(error.message || "–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É")
      }
      // –û—á–∏—â—É—î–º–æ input, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –∑–Ω–æ–≤—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª, —è–∫—â–æ —Ç—Ä–µ–±–∞
      event.target.value = null
    })
  }

  const startTranslation = async (wordsToTranslate) => {
    if (wordsToTranslate.length === 0) {
      setTranslate(false)
      return
    }

    for (let i = 0; i < wordsToTranslate.length; i++) {
      if (stopRequested.current) {
        alert(`‚è∏ –ó—É–ø–∏–Ω–µ–Ω–æ –Ω–∞ ${i} —ñ–∑ ${wordsToTranslate.length} —Å–ª—ñ–≤`)
        setTranslate(false)
        loadWords?.()
        return
      }

      const word = wordsToTranslate[i].word
      const id = wordsToTranslate[i].id

      try {
        await translateWord(word, fromLanguage, toLanguage) // server action
        translatedCountRef.current++
        setMessage(`–ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ ${translatedCountRef.current} –∑ ${wordsToTranslate.length}`)
      } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É:", word, err)
        setMessage(`–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É —Å–ª–æ–≤–∞ "${word}" (${translatedCountRef.current} –∑ ${wordsToTranslate.length})`)
      }

      await new Promise((res) => setTimeout(res, 400)) // –ø–∞—É–∑–∞
    }

    alert(`‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${translatedCountRef.current} —ñ–∑ ${wordsToTranslate.length}`)
    setTranslate(false)
    setMessage(`‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${translatedCountRef.current} —ñ–∑ ${wordsToTranslate.length}`)
    loadWords?.()
  }

  //   const translateSelectedWords = async (selectedWords) => {

  // –û–¥–Ω–∞ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
  const translateWords = async (words) => {
    // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ "–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥"
    if (words === "stop") {
      stopRequested.current = true
      setTranslate(false)
      return
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ words ‚Äî –º–∞—Å–∏–≤
    if (!Array.isArray(words)) {
      setTranslate(false)
      alert("‚ö†Ô∏è –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.")
      return
    }

    stopRequested.current = false
    translatedCountRef.current = 0

    if (words.length === 0) {
      setTranslate(false)
      alert("‚ö†Ô∏è –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.")
      return
    }

    const untranslatedWords = words.filter((w) => !w.translation?.trim())

    if (untranslatedWords.length === 0) {
      setDialogConfig({
        type: "translate",
        title: "–£—Å—ñ —Å–ª–æ–≤–∞ –≤–∂–µ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ",
        message: "–£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ —Å–ª–æ–≤–∞ –≤–∂–µ –º–∞—é—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥. –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —â–µ —Ä–∞–∑?",
        buttons: [{ label: "–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ" }, { label: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" }],
        allWords: words,
        untranslatedWords: [],
      })
      setDialogOpen(true)
      setTranslate(false)
      return
    }

    if (untranslatedWords.length < words.length) {
      setDialogConfig({
        type: "translate",
        title: "–©–æ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏?",
        message: "–î–µ—è–∫—ñ —Å–ª–æ–≤–∞ –≤–∂–µ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        buttons: [{ label: "–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ" }, { label: "–õ–∏—à–µ –Ω–µ–ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω—ñ" }, { label: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" }],
        allWords: words,
        untranslatedWords,
      })
      setDialogOpen(true)
      setTranslate(false)
      return
    }

    setTranslate(true)
    startTranslation(untranslatedWords)
  }

  //   -------------------------------------------

//   // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º
//   const handleThemeDownload = async (selectedWords) => {
//     if (!selectedWords || !selectedWords.length) {
//       setMessage("–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Å–ª–æ–≤–∞).")
//       return
//     }

//     const topicIds = [...new Set(selectedWords.map((w) => w.topic_id))]
//     if (!topicIds.length) {
//       setMessage("–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
//       return
//     }

//     setMessage("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")

//     try {
//       const res = await fetch(`/api/export?ids=${topicIds.join(",")}`, { cache: "no-store" })
//       if (!res.ok) throw new Error(await res.text())

//       const payload = await res.json()

//       // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ª–æ–≤–∞ –ø–æ –≤—ñ–¥–º—ñ—á–µ–Ω–∏—Ö id
//       const selectedWordIds = new Set(selectedWords.map((w) => w.id))
//       payload.words = payload.words.filter((w) => selectedWordIds.has(w.id))

//       // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É –¥–æ–¥–∞—Ç–æ–∫ –ª–∏—à–µ —è–∫—â–æ –º–∏ –¥—ñ–π—Å–Ω–æ –≤ RN WebView
//       if (isFromApp && typeof window !== "undefined" && window.ReactNativeWebView) {
//         window.ReactNativeWebView.postMessage(JSON.stringify({ type: "rwords-export", payload }))
//         setMessage(`–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –¥–æ–¥–∞—Ç–æ–∫: —Ç–µ–º ${payload.topics.length}, —Å–ª—ñ–≤ ${payload.words.length}.`)
//         return
//       }

//       // –Ø–∫—â–æ –Ω–µ —É –¥–æ–¥–∞—Ç–∫—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ JSON (–Ω–µ —Ä–æ–±–∏–º–æ —ñ–º–ø–æ—Ä—Ç —É –±—Ä–∞—É–∑–µ—Ä—ñ)
//       setMessage("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON –º–æ–∂–ª–∏–≤–µ –ª–∏—à–µ —É –¥–æ–¥–∞—Ç–∫—É.")
//     } catch (err) {
//       console.error(err)
//       setMessage("–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: " + (err?.message || "–Ω–µ–≤—ñ–¥–æ–º–∞"))
//     }
//   }


const handleThemeDownload = async (selectedWords) => {
  if (!selectedWords || !selectedWords.length) {
    setMessage("–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ —Å–ª–æ–≤–∞).")
    return
  }

  const topicIds = [...new Set(selectedWords.map((w) => w.topic_id))]
  if (!topicIds.length) {
    setMessage("–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
    return
  }

  setMessage("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")

  try {
    const res = await fetch(`/api/export?ids=${topicIds.join(",")}`, { cache: "no-store" })
    if (!res.ok) throw new Error(await res.text())

    const payload = await res.json()

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ª–æ–≤–∞ –ø–æ –≤—ñ–¥–º—ñ—á–µ–Ω–∏—Ö id
    const selectedWordIds = new Set(selectedWords.map((w) => w.id))
    payload.words = payload.words.filter((w) => selectedWordIds.has(w.id))

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É –¥–æ–¥–∞—Ç–æ–∫ –ª–∏—à–µ —è–∫—â–æ –º–∏ –¥—ñ–π—Å–Ω–æ –≤ RN WebView

    // if (isFromApp && typeof window !== "undefined" && window.ReactNativeWebView) {
    if (isFromApp) {
      window.ReactNativeWebView.postMessage(JSON.stringify({ type: "rwords-export", payload }))

      // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å —Å–ª—ñ–≤
      try {
        await incrementWordDownloads(session?.user?.id)
      } catch (err) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", err)
      }

      setMessage(`–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –¥–æ–¥–∞—Ç–æ–∫: —Ç–µ–º ${payload.topics.length}, —Å–ª—ñ–≤ ${payload.words.length}.`)
      return
    }

    // –Ø–∫—â–æ –Ω–µ —É –¥–æ–¥–∞—Ç–∫—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ JSON (–Ω–µ —Ä–æ–±–∏–º–æ —ñ–º–ø–æ—Ä—Ç —É –±—Ä–∞—É–∑–µ—Ä—ñ)
    setMessage("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON –º–æ–∂–ª–∏–≤–µ –ª–∏—à–µ —É –¥–æ–¥–∞—Ç–∫—É.")
  } catch (err) {
    console.error(err)
    setMessage("–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: " + (err?.message || "–Ω–µ–≤—ñ–¥–æ–º–∞"))
  }
}


  //—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Å–ª—ñ–≤
  const deleteSelected = async (selectedWords) => {
    // console.log("words/deleteSelected0/selectedWords=", selectedWords)
    console.log("words/deleteSelected0/selectedWords=", JSON.stringify(selectedWords, null, 2))
    if (!user) {
      alert("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, —â–æ–± –≤–∏–¥–∞–ª—è—Ç–∏ —Å–ª–æ–≤–∞")
      return
    }
    console.log("words/deleteSelected1")

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Å–ª–æ–≤–∞ –Ω–∞–ª–µ–∂–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const ownWords = selectedWords.filter((w) => user.role === "admin" || w.user_id === user.id)
    const ownIds = ownWords.map((w) => w.id)
    const othersCount = selectedWords.length - ownWords.length
    console.log("words/deleteSelected2")
    if (ownIds.length === 0) {
      // –ù–µ–º–∞ —Å–≤–æ—ó—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      alert("–£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞–ª–µ–∂–∞—Ç—å —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. –í–∏–¥–∞–ª—è—Ç–∏ –Ω—ñ—á–æ–≥–æ.")
      return
    }
    console.log("words/deleteSelected2")

    if (othersCount > 0) {
      const confirmed = confirm(
        `–£ –≤–∏–±–æ—Ä—ñ —î ${othersCount} —á—É–∂–∏—Ö —Å–ª—ñ–≤. –í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—à–µ –≤–∞—à—ñ (${ownIds.length})? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—ó, –∞–±–æ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.`
      )
      if (!confirmed) return
    }

    console.log("words/deleteSelected2")
    try {
      console.log("words/deleteSelected3/deleteWords")
      await deleteWords(ownIds, user?.id, user?.role)
      setMessage(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${ownIds.length} —Å–ª—ñ–≤`)
      //   clearSelection()
      setActionsOk(true)
      loadWords()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  //—Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –¥—ñ–∞–ª–æ–≥—É
  const handleDialogResult = (index) => {
    setDialogOpen(false)
    if (dialogConfig.type === "translate") {
      if (dialogConfig.untranslatedWords.length === 0) {
        // –í—Å—ñ —Å–ª–æ–≤–∞ –≤–∂–µ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ
        if (index === 0) {
          setTranslate(true)
          stopRequested.current = false
          startTranslation(dialogConfig.allWords)
        } else {
          // index === 1 ‚Äî –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
          setTranslate(false)
          stopRequested.current = true
        }
      } else {
        // –Ñ –Ω–µ–ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω—ñ
        if (index === 0) {
          setTranslate(true)
          stopRequested.current = false
          startTranslation(dialogConfig.allWords)
        } else if (index === 1) {
          setTranslate(true)
          stopRequested.current = false
          startTranslation(dialogConfig.untranslatedWords)
        } else {
          // index === 2 ‚Äî –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
          setTranslate(false)
          stopRequested.current = true
        }
      }
    } else if (dialogConfig.type === "delete") {
      if (index === 0) {
        // –í–∏–¥–∞–ª–∏—Ç–∏
        startTransition(async () => {
          try {
            await deleteSelected(dialogConfig.wordsToDelete)
            setMessage(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${dialogConfig.wordsToDelete.length} —Å–ª—ñ–≤`)
            loadWords()
          } catch (err) {
            setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message)
          }
        })
      }
      // index === 1 ‚Äî –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
    }
    // –î–æ–¥–∞–≤–∞–π —ñ–Ω—à—ñ —Ç–∏–ø–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
  }
  return (
    <main className="p-1 max-w-4xl mx-auto">
      {/* {topics.length > 0 && sections.length > 0 && ( */}
      <TableView
        data={words}
        dataLevel1={topics}
        dataLevel2={sections}
        level1Id="topic_id"
        level2Id="section_id"
        columns={columns}
        title={"–°–ª–æ–≤–∞"}
        onAdd={openAddModal}
        onEdit={openEditModal}
        onDelete={handleDelete} // –ø–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ id
        onClickCsv={() => document.getElementById("csvInput").click()}
        onTranslate={translateWords}
        onThemeDownload={isFromApp ? handleThemeDownload : undefined}
        translate={translate} //–ß–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–æ –¥–ª—è –∑–º—ñ–Ω–∏ –∫–Ω–æ–ø–∫–∏
        level0Head="–°–ª–æ–≤–∞"
        level1Head="–¢–µ–º–∞"
        level2Head="–ì—Ä—É–ø–∞ —Ç–µ–º"
        sortField={"pn"} //–ø–æ–ª–µ –¥–ª—è –ø–æ—Ä—è–¥–∫—É
        isPending={isPending} //–î–õ—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —ñ–º–ø–æ—Ä—Ç –ø–æ–∫–∏–π–¥–µ —ñ–º–ø–æ—Ä—Ç
        message={message} //–î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        setMessage={setMessage} //–î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        actionsOk={actionsOk} //
        setActionsOk={setActionsOk}
      />
      {/* )} */}
      <input type="file" id="csvInput" accept=".csv,text/csv" style={{ display: "none" }} onChange={handleFileUpload} />
      <Modal open={!!modal} onClose={closeModal}>
        <h2 className="text-lg font-semibold mb-4">{modal?.type === "edit" ? "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ª–æ–≤–æ" : "–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ"}</h2>
        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          {modal?.type === "edit" && (
            <div>
              <label htmlFor="id" className="block font-medium mb-1">
                ID
              </label>
              <input
                id="id"
                type="text"
                value={id}
                readOnly
                className="border p-2 rounded bg-gray-100 cursor-not-allowed"
              />
            </div>
          )}
          <div>
            <label htmlFor="word" className="block font-medium mb-1">
              –°–ª–æ–≤–æ
            </label>
            <input
              id="word"
              type="text"
              placeholder="–°–ª–æ–≤–æ"
              value={word}
              onChange={(e) => setWord(e.target.value)}
              className="border p-2 rounded"
              required
            />
          </div>
          <div>
            <label htmlFor="translation" className="block font-medium mb-1">
              –ü–µ—Ä–µ–∫–ª–∞–¥
            </label>
            <input
              id="translation"
              type="text"
              placeholder="–ü–µ—Ä–µ–∫–ª–∞–¥"
              value={translation}
              onChange={(e) => setTranslation(e.target.value)}
              className="border p-2 rounded"
              //   required
            />
          </div>
          <div>
            <label htmlFor="pn" className="block font-medium mb-1">
              –ü–æ—Ä—è–¥–æ–∫ (PN)
            </label>
            <input
              id="pn"
              type="number"
              placeholder="–ü–æ—Ä—è–¥–æ–∫"
              value={pn}
              onChange={(e) => setPn(e.target.value)}
              className="border p-2 rounded"
            />
          </div>
          <div>
            <label htmlFor="topic_id" className="block font-medium mb-1">
              –¢–æ–ø—ñ–∫
            </label>
            <select
              id="topic_id"
              value={topic_id}
              onChange={(e) => setTopicId(e.target.value)}
              className="border p-2 rounded"
              required
            >
              <option value="">–û–±–µ—Ä—ñ—Ç—å —Ç–æ–ø—ñ–∫</option>
              {topics.map((t) => (
                <option key={t.id} value={t.id}>
                  {t.name}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label htmlFor="img" className="block font-medium mb-1">
              URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            </label>
            <input
              id="img"
              type="text"
              placeholder="URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
              value={img}
              onChange={(e) => setImg(e.target.value)}
              className="border p-2 rounded"
            />
          </div>
          <label className="flex items-center gap-2">
            <input type="checkbox" checked={know} onChange={(e) => setKnow(e.target.checked)} />
            –ó–Ω–∞—é
          </label>
          <div className="flex gap-4 mt-2">
            <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">
              {modal?.type === "edit" ? "–û–Ω–æ–≤–∏—Ç–∏" : "–î–æ–¥–∞—Ç–∏"}
            </button>
            <button type="button" onClick={closeModal} className="border px-4 py-2 rounded">
              –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
            </button>
          </div>
        </form>
      </Modal>
      {/* <MoveRowModal
        open={moveMode}
        onClose={() => setMoveMode(false)}
        moveInfo={moveInfo}
        moveSelectedRow={moveSelectedRow}
      /> */}
      <CustomDialog
        open={dialogOpen}
        title={dialogConfig.title}
        message={dialogConfig.message}
        buttons={dialogConfig.buttons}
        onResult={handleDialogResult}
        onClose={() => setDialogOpen(false)}
      />
    </main>
  )
}
