// topics/page.jsx
"use client"

import React, { useEffect, useState, useTransition } from "react"
import {
  getTopics,
  createTopic,
  updateTopic,
  deleteTopic,
  deleteTopics,
  checkTopicRelations,
} from "@/app/actions/topicActions"
import { getSections } from "@/app/actions/sectionActions" // –ü–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è, —â–æ —î —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ–π
// import { useAuth } from "@/app/context/AuthContext"
import { useSession } from "next-auth/react"
import TableView from "@/app/components/tables/TableView"

function Modal({ open, onClose, children }) {
  if (!open) return null
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
      <div className="bg-white rounded-xl p-6 min-w-[320px] relative shadow-xl">
        <button onClick={onClose} className="absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-xl">
          √ó
        </button>
        {children}
      </div>
    </div>
  )
}

//–î–ª—è TableView
const columns = [
  {
    label: "‚Ññ–ø",
    accessor: "pn",
    type: "integer",
    width: 50,
    styleCell: { alignItems: "center" },
    //   styleCellText: {color: 'green'},
    markIfOwner: true, // üöÄ –Ω–æ–≤–µ –ø–æ–ª–µ
  },
  { label: "–¢–µ–º–∞", accessor: "name", type: "text", width: 250 },
  { label: "–°–µ–∫—Ü—ñ—è", accessor: "section_name", type: "text", width: 250 },
  {
    label: "Tid",
    accessor: "id",
    type: "integer",
    width: 40,
    styleCell: { alignItems: "center" },
  },
]

export default function TopicsPage() {
  const { data: session, status } = useSession()
  const user = session?.user
  const [topics, setTopics] = useState([])
  const [sections, setSections] = useState([])
  const [modal, setModal] = useState(null) // null | {type, topic}
  const [id, setId] = useState(null)
  const [name, setName] = useState("")
  const [section_id, setSectionId] = useState("")
  const [pn, setPn] = useState("")
  const [message, setMessage] = useState("")
  const [isPending, startTransition] = useTransition()
  const [actionsOk, setActionsOk] = useState(false) //–î–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–∫—Ü—ñ–π(delete)

  useEffect(() => {
    loadTopics()
    loadSections()
    // console.log("topics/Topics=", topics)
    // console.log("topics/Sections=", sections)
  }, [])

  const loadTopics = () => {
    getTopics()
      .then(setTopics)
      .catch((err) => setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message))
  }

  const loadSections = () => {
    getSections()
      .then(setSections)
      .catch(() => setSections([]))
  }

  const openAddModal = () => {
    setId(null)
    setName("")
    setPn("")
    setSectionId("")
    setModal({ type: "add" })
    setMessage("")
  }

  const openEditModal = (t) => {
    setId(t.id)
    setName(t.name)
    setPn(t.pn)
    setSectionId(t.section_id.toString())
    setModal({ type: "edit", topic: t })
    setMessage("")
  }

  const closeModal = () => {
    setModal(null)
    setId(null)
    setName("")
    setPn("")
    setSectionId("")
    setMessage("")
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    if (!user) return setMessage("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è")
    if (!name.trim()) return setMessage("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É")
    if (section_id === "") return setMessage("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∫—Ü—ñ—é")
    if (pn === "") return setMessage("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ä—è–¥–æ–∫")

    const data = {
      name: name.trim(),
      pn: Number(pn),
      section_id: Number(section_id),
    }

    startTransition(async () => {
      try {
        if (modal?.type === "edit") {
          await updateTopic(id, data, user)
          setMessage("–¢–æ–ø—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        } else {
          await createTopic(data, user.id)
          setMessage("–¢–æ–ø—ñ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        }
        closeModal()
        loadTopics()
      } catch (err) {
        setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message)
      }
    })
  }

  const handleDelete = (t) => {
    console.log("topics/handleDelete/t=", t)
    if (!confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ ${t.length} —Ç–µ–º?`)) return

    startTransition(async () => {
      try {
        // await deleteTopic(t.id, user)
        await deleteSelectedTopics(t) // ‚úÖ –≤–∂–µ –º–∞—Å–∏–≤
        setMessage("–í–∏–¥–∞–ª–µ–Ω–æ")
        loadTopics()
      } catch (err) {
        setMessage("–ü–æ–º–∏–ª–∫–∞: " + err.message)
      }
    })
  }

  //   const deleteSelectedTopics = async (selectedTopics) => {
  //     console.log("topics/deleteSelectedTopics/selectedTopics=", JSON.stringify(selectedTopics, null, 2))
  //     if (!user) {
  //       alert("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, —â–æ–± –≤–∏–¥–∞–ª—è—Ç–∏ —Ç–æ–ø—ñ–∫–∏")
  //       return
  //     }

  //     // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Ç–æ–ø—ñ–∫–∏ –Ω–∞–ª–µ–∂–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∞–±–æ —è–∫—â–æ –≤—ñ–Ω –∞–¥–º—ñ–Ω ‚Äî –≤—Å—ñ
  //     const ownTopics = selectedTopics.filter((t) => user.role === "admin" || t.user_id === user.id)
  //     const ownIds = ownTopics.map((t) => t.id)
  //     const othersCount = selectedTopics.length - ownTopics.length

  //     if (ownIds.length === 0) {
  //       alert("–£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ —Ç–æ–ø—ñ–∫–∏ –Ω–∞–ª–µ–∂–∞—Ç—å —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. –í–∏–¥–∞–ª—è—Ç–∏ –Ω—ñ—á–æ–≥–æ.")
  //       return
  //     }

  //     if (othersCount > 0) {
  //       const confirmed = confirm(
  //         `–£ –≤–∏–±–æ—Ä—ñ —î ${othersCount} —á—É–∂–∏—Ö —Ç–æ–ø—ñ–∫—ñ–≤. –í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—à–µ –≤–∞—à—ñ (${ownIds.length})? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—ó, –∞–±–æ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.`
  //       )
  //       if (!confirmed) return
  //     } else {
  //       const confirmed = confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${ownIds.length} —Ç–æ–ø—ñ–∫—ñ–≤?`)
  //       if (!confirmed) return
  //     }

  //     try {
  //       await deleteTopics(ownIds, user.id, user.role)
  //       setMessage(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${ownIds.length} —Ç–æ–ø—ñ–∫—ñ–≤`)
  //       // clearSelection() ‚Äî —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
  //       setActionsOk(true)
  //       loadTopics() // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–ø—ñ–∫—ñ–≤
  //     } catch (err) {
  //       setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: " + err.message)
  //     }
  //   }

  const deleteSelectedTopics = async (selectedTopics) => {
    console.log("topics/deleteSelectedTopics/selectedTopics=", JSON.stringify(selectedTopics, null, 2))

    if (!user) {
      alert("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, —â–æ–± –≤–∏–¥–∞–ª—è—Ç–∏ —Ç–æ–ø—ñ–∫–∏")
      return
    }

    // 1Ô∏è‚É£ –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–≤–æ—ó —Ç–æ–ø—ñ–∫–∏
    const ownTopics = selectedTopics.filter((t) => user.role === "admin" || t.user_id === user.id)
    const ownIds = ownTopics.map((t) => t.id)
    const othersCount = selectedTopics.length - ownTopics.length

    if (ownIds.length === 0) {
      alert("–£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ —Ç–æ–ø—ñ–∫–∏ –Ω–∞–ª–µ–∂–∞—Ç—å —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. –í–∏–¥–∞–ª—è—Ç–∏ –Ω—ñ—á–æ–≥–æ.")
      return
    }

    if (othersCount > 0) {
      const confirmed = confirm(`–£ –≤–∏–±–æ—Ä—ñ —î ${othersCount} —á—É–∂–∏—Ö —Ç–æ–ø—ñ–∫—ñ–≤. –í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—à–µ –≤–∞—à—ñ (${ownIds.length})?`)
      if (!confirmed) return
    }

    // 2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–≤‚Äô—è–∑–∫—ñ–≤
    try {
      const topicsWithRelations = await checkTopicRelations(ownIds)
      if (topicsWithRelations.length > 0) {
        const countWithRelations = topicsWithRelations.length
        const countWithoutRelations = ownIds.length - countWithRelations

        if (confirm(`‚ö†Ô∏è ${countWithRelations} —Ç–æ–ø—ñ–∫—ñ–≤ –º–∞—é—Ç—å –ø–æ–≤'—è–∑–∞–Ω—ñ –∑–∞–ø–∏—Å–∏. –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ (${ownIds.length})?`)) {
          // –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ
        } else if (
          countWithoutRelations > 0 &&
          confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –±–µ–∑ –∑–≤'—è–∑–∫—ñ–≤ (${countWithoutRelations})?`)
        ) {
          // —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–µ–∑ –∑–≤‚Äô—è–∑–∫—ñ–≤
          ownIds.splice(0, ownIds.length, ...ownIds.filter((id) => !topicsWithRelations.includes(id)))
        } else {
          // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–º—ñ–Ω–∏–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
          return
        }
      }
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–≤'—è–∑–∫—ñ–≤: " + err.message)
      return
    }

    // 3Ô∏è‚É£ –û—Å—Ç–∞—Ç–æ—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    const confirmed = confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${ownIds.length} —Ç–æ–ø—ñ–∫—ñ–≤?`)
    if (!confirmed) return

    // 4Ô∏è‚É£ –í–∏–¥–∞–ª–µ–Ω–Ω—è
    try {
      await deleteTopics(ownIds, user.id, user.role)
      setMessage(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${ownIds.length} —Ç–æ–ø—ñ–∫—ñ–≤`)
      setActionsOk(true)
      loadTopics()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  //   const isOwnerOrAdmin = (row) => user && (user.role === "admin" || user.id === row.user_id)

  return (
    <main className="p-6 max-w-4xl mx-auto">
      <TableView
        data={topics}
        dataLevel1={sections}
        level1Id="section_id"
        columns={columns}
        title={"–¢–µ–º–∏"}
        level0Head="–¢–µ–º–∞"
        level1Head="–ì—Ä—É–ø–∞ —Ç–µ–º"
        onAdd={openAddModal}
        onEdit={openEditModal}
        onDelete={handleDelete} // –ø–µ—Ä–µ–¥–∞—î–º–æ –ª–∏—à–µ id
        sortField={"pn"} //–ø–æ–ª–µ –¥–ª—è –ø–æ—Ä—è–¥–∫—É
        isPending={isPending} //–î–õ—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —ñ–º–ø–æ—Ä—Ç –ø–æ–∫–∏–π–¥–µ —ñ–º–ø–æ—Ä—Ç
        message={message} //–î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        setMessage={setMessage} //–î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        actionsOk={actionsOk} //
        setActionsOk={setActionsOk}
      />

      <Modal open={!!modal} onClose={closeModal}>
        <h2 className="text-lg font-semibold mb-4">{modal?.type === "edit" ? "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–ø—ñ–∫" : "–î–æ–¥–∞—Ç–∏ —Ç–æ–ø—ñ–∫"}</h2>
        <form onSubmit={handleSubmit} className="flex flex-col gap-3">
          {modal?.type === "edit" && (
            <div>
              <label htmlFor="id" className="block font-medium mb-1">
                ID
              </label>
              <input
                id="id"
                type="text"
                value={id}
                readOnly
                className="border p-2 rounded bg-gray-100 cursor-not-allowed"
              />
            </div>
          )}
          <div>
            <label htmlFor="name" className="block font-medium mb-1">
              –ù–∞–∑–≤–∞
            </label>
            <input
              id="name"
              type="text"
              placeholder="–ù–∞–∑–≤–∞"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="border p-2 rounded"
              required
            />
          </div>
          <div>
            <label htmlFor="pn" className="block font-medium mb-1">
              –ü–æ—Ä—è–¥–æ–∫ (PN)
            </label>
            <input
              id="pn"
              type="number"
              placeholder="–ü–æ—Ä—è–¥–æ–∫"
              value={pn}
              onChange={(e) => setPn(e.target.value)}
              className="border p-2 rounded"
              required
            />
          </div>
          <div>
            <label htmlFor="section_id" className="block font-medium mb-1">
              –°–µ–∫—Ü—ñ—è
            </label>
            <select
              id="section_id"
              value={section_id}
              onChange={(e) => setSectionId(e.target.value)}
              className="border p-2 rounded"
              required
            >
              <option value="">–û–±–µ—Ä—ñ—Ç—å —Å–µ–∫—Ü—ñ—é</option>
              {sections.map((section) => (
                <option key={section.id} value={section.id}>
                  {section.name}
                </option>
              ))}
            </select>
          </div>
          <div className="flex gap-4 mt-2">
            <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">
              {modal?.type === "edit" ? "–û–Ω–æ–≤–∏—Ç–∏" : "–î–æ–¥–∞—Ç–∏"}
            </button>
            <button type="button" onClick={closeModal} className="border px-4 py-2 rounded">
              –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
            </button>
          </div>
        </form>
      </Modal>
    </main>
  )
}
