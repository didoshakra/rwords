// components/TableView.js
// –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ
// –ü—Ä–∞—Ü—é—î –¥–ª—è –≤—Å—ñ—Ö —Ä—ñ–≤–Ω—ñ–≤

import React, { useEffect, useState, useTransition, useRef } from "react"
// import { useAuth } from "@/app/context/AuthContext"
import { useSession } from "next-auth/react"
import MoveRowModal from "@/app/components/tables/MoveRowModal"

export default function TableView({
  data,
  dataLevel1,
  dataLevel2,
  level1Id,
  level2Id,
  level0Head = "–°–ª–æ–≤–∞",
  level1Head = "–¢–µ–º–∞",
  level2Head = "–ì—Ä—É–ø–∞ —Ç–µ–º",
  columns,
  title,
  onAdd,
  onEdit,
  onDelete,
  onClickCsv,
  onTranslate,
  onThemeDownload,
  //   onTranslateSelected,
  translate,
  //   sortField = "pn",
  isPending, //–î–õ—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —ñ–º–ø–æ—Ä—Ç –ø–æ–∫–∏–π–¥–µ —ñ–º–ø–æ—Ä—Ç
  message, //–î–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  setMessage,
  actionsOk, //–£—Å–ø—ñ—Ö –∞–∫—Ü—ñ–π (delete)
  setActionsOk, //–£—Å–ø—ñ—Ö –∞–∫—Ü—ñ–π (delete)
}) {
  // prors
  const showOwnerMark = true
  //   const { user } = useAuth()
  const { data: session, status } = useSession()
  const user = session?.user
  //
  const [tData, setTData] = useState(data || [])
  const [level1, setLevel1] = useState(dataLevel1 || [])
  const [level2, setLevel2] = useState(dataLevel2 || [])
  //   const [pn, setPn] = useState("")
  const [isOrderChanged, setIsOrderChanged] = useState(false) //–î–ª—è –ø–æ—Ä–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –ø–æ—Ä—è–¥–∫—É
  const [selectedIds, setSelectedIds] = useState([]) //
  const [selectedLevel1, setSelectedLevel1] = useState([])
  //   –î–ª—è –º–æ–¥–∞–ª–∫–∏ —Å—Ç—Ä—ñ–ª–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  const [moveMode, setMoveMode] = useState(false)
  const [moveInfo, setMoveInfo] = useState(null) // { idx, total }
  const tableContainerRef = useRef(null) //–î–ª—è —Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ****
  const rowRefs = useRef([]) //–î–ª—è —Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ
  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø(—Å–µ–∫—Ü—ñ–π)
  const [openLevel2, setOpenLevel2] = useState([])
  const [openLevel1, setOpenLevel1] = useState([]) // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ

  useEffect(() => {
    setTData(data || [])
    setLevel1(dataLevel1 || [])
    setLevel2(dataLevel2 || [])
    setOpenLevel1(dataLevel1 || [])
  }, [data, dataLevel2, dataLevel1])

  useEffect(() => {
    if (actionsOk) {
      clearSelection() // –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ –≤—ñ–¥–º—ñ—Ç–∫–∏
      setActionsOk(false) // –≥–æ—Ç—É—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–¥—ñ—ó
    }
  }, [actionsOk])

  //   –ö–æ–ª–∏ —Å—Ç–∞–≤–∏—à message, –∑–∞–ø—É—Å–∫–∞–π —Ç–∞–π–º–µ—Ä, —è–∫–∏–π —á–µ—Ä–µ–∑ 3-4 —Å–µ–∫—É–Ω–¥–∏ –æ–±–Ω—É–ª—è—î –π–æ–≥–æ:
  useEffect(() => {
    if (message) {
      const timer = setTimeout(() => setMessage(""), 4000)
      return () => clearTimeout(timer) // –æ—á–∏—â–∞—î —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∞–±–æ –∑–º—ñ–Ω—ñ message
    }
  }, [message])

  //   console.log("TableView/TData=", tData)
  //   console.log("TableView/level1=", level1)
  //   console.log("TableView/level2=", level2)

  const toggleSelectTopic = (id) => {
    setSelectedLevel1((prev) => {
      let selectedLevel1
      if (prev.includes(id)) {
        // –ó–Ω—è—Ç–∏ –≤–∏–±—ñ—Ä —Ç–µ–º–∏
        selectedLevel1 = prev.filter((x) => x !== id)
        // –ó–Ω—è—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ —Ç–µ–º–∏ –∑ selectedIds
        const topicWordIds = tData.filter((w) => w[level1Id] === id).map((w) => w.id)
        setSelectedIds((prevIds) => prevIds.filter((wid) => !topicWordIds.includes(wid)))
      } else {
        // –î–æ–¥–∞—Ç–∏ —Ç–µ–º—É –¥–æ –≤–∏–±—Ä–∞–Ω–∏—Ö
        selectedLevel1 = [...prev, id]
        // –î–æ–¥–∞—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞ —Ç–µ–º–∏ –¥–æ selectedIds (—É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω—å)
        const topicWordIds = tData.filter((w) => w[level1Id] === id).map((w) => w.id)
        setSelectedIds((prevIds) => {
          const newIds = [...prevIds]
          for (const tid of topicWordIds) {
            if (!newIds.includes(tid)) newIds.push(tid)
          }
          return newIds
        })
      }
      return selectedLevel1
    })
  }

  //GPT/ –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  const saveOrder = async () => {
    if (!user) return

    if (user.role !== "admin") {
      alert("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ —É—Å—ñ—Ö —Å–ª—ñ–≤ –º–æ–∂–µ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
      return
    }

    try {
      for (let i = 0; i < tData.length; i++) {
        const w = tData[i]
        const newPn = i + 1
        if (w.pn !== newPn) {
          await updateWordPn(w.id, newPn, user)
        }
      }
      setMessage("‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
      setTimeout(() => setMessage(""), 2000)
      setIsOrderChanged(false)
      loadWords()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  const updatePNs = (updatedWords) => {
    const newWords = updatedWords.map((w, i) => ({
      ...w,
      pn: i + 1, // –æ–Ω–æ–≤–ª—é—î–º–æ pn
    }))
    setTData(newWords)
    setIsOrderChanged(true) // ‚ö†Ô∏è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–º—ñ–Ω
  }

  //   const isOwnerOrAdmin = (w) => user && (user.role === "admin" || user.id === w.user_id)

  //–î–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∞–±–æ –ø—Ä–∏–∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (isOrderChanged) {
        e.preventDefault()
        e.returnValue = "" // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –¥–µ—è–∫–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
      }
    }

    window.addEventListener("beforeunload", handleBeforeUnload)

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload)
    }
  }, [isOrderChanged])

  const isSelected = (id) => selectedIds.includes(id)

  const toggleSelect = (id) => {
    setSelectedIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]))
  }

  const selectAll = () => {
    setSelectedIds(tData.map((w) => w.id))
    setSelectedLevel1(level1.map((w) => w.id))
  }

  const clearSelection = () => {
    setSelectedIds([])
    setSelectedLevel1([])
  }
  //   –î–ª—è –º–æ–¥–∞–ª–∫–∏ —Å—Ç—Ä—ñ–ª–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  const startMoveMode = () => {
    if (selectedIds.length !== 1) return

    const id = selectedIds[0]
    const idx = tData.findIndex((w) => w.id === id)
    if (idx === -1) return

    setMoveInfo({ idx, total: tData.length })
    scrollRowIntoView(idx) //–î–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª—É
    setMoveMode(true)
  }
  //   –î–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ
  const scrollRowIntoView = (rowIndex) => {
    const container = document.querySelector(".table-container") // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ overflow-auto, —â–æ –æ–±–≥–æ—Ä—Ç–∞—î —Ç–∞–±–ª–∏—Ü—é
    if (!container) return

    const rows = container.querySelectorAll("tbody tr")
    if (!rows[rowIndex]) return

    const row = rows[rowIndex]

    const containerTop = container.scrollTop
    const containerBottom = containerTop + container.clientHeight

    const rowTop = row.offsetTop
    const rowBottom = rowTop + row.offsetHeight

    if (rowTop < containerTop) {
      // —Ä—è–¥–æ–∫ –≤–∏—â–µ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ, —Å–∫—Ä–æ–ª–∏–º–æ –Ω–∞–≤–µ—Ä—Ö, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –π–æ–≥–æ
      container.scrollTop = rowTop
    } else if (rowBottom > containerBottom) {
      // —Ä—è–¥–æ–∫ –Ω–∏–∂—á–µ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ, —Å–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑
      container.scrollTop = rowBottom - container.clientHeight
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤ –º–∞—Å–∏–≤—ñ tData –≤ —Å—Ç–∞–Ω—ñ:
  const moveSelectedRow = (direction) => {
    if (!moveInfo) return

    const { idx } = moveInfo
    const topicId = tData[idx].topic_id

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ü—å–æ–≥–æ topic
    const topicWords = tData.filter((w) => w.topic_id === topicId)
    const topicIndexes = topicWords.map((w) => tData.findIndex((x) => x.id === w.id))
    const localIdx = topicIndexes.indexOf(idx)

    let newIdx = idx

    // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –≥—Ä—É–ø–∏
    if (direction === "up" && localIdx > 0) {
      newIdx = topicIndexes[localIdx - 1]
    } else if (direction === "down" && localIdx < topicIndexes.length - 1) {
      newIdx = topicIndexes[localIdx + 1]
    }

    if (newIdx === idx) return // –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É —Ç–∞ –º—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏
    let updatedWords = [...tData]
    ;[updatedWords[idx], updatedWords[newIdx]] = [updatedWords[newIdx], updatedWords[idx]]

    // –û–Ω–æ–≤–ª—é—î–º–æ pn
    const newWordsWithPN = updatedWords.map((w, i) => ({ ...w, pn: i + 1 }))

    setTData(newWordsWithPN)
    setIsOrderChanged(true)

    // –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ: –æ–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ idx, —ñ–Ω—à—ñ –ø–æ–ª—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è
    setMoveInfo((prev) => ({ ...prev, idx: newIdx }))

    // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    if (rowRefs.current[newIdx]) {
      rowRefs.current[newIdx].scrollIntoView({
        behavior: "smooth",
        block: "nearest",
      })
    }
  }

  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø
  const toggleLevel2 = (sectionId) => {
    setOpenLevel2((prev) => (prev.includes(sectionId) ? prev.filter((id) => id !== sectionId) : [...prev, sectionId]))
  }
  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø
  const toggleLevel1 = (topicId) => {
    setOpenLevel1((prev) => (prev.includes(topicId) ? prev.filter((id) => id !== topicId) : [...prev, topicId]))
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  //=== –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ä—è–¥–∫—ñ–≤
  const renderTopic = (topic, topicWords) => {
    const topicWordIds = topicWords.map((w) => w.id)
    const selectedCount = topicWordIds.filter((id) => selectedIds.includes(id)).length

    let checkbox = "üî≤"
    if (selectedCount === topicWords.length && selectedCount > 0) checkbox = `‚òëÔ∏è`
    else if (selectedCount > 0) checkbox = `‚ûñ`
    if (topicWords.length < 1) checkbox = "  "

    return (
      <React.Fragment key={topic.id}>
        <tr onClick={() => toggleLevel1(topic.id)} className="bg-gray-200 cursor-pointer hover:bg-gray-300">
          <td colSpan={showOwnerMark ? columns.length + 2 : columns.length} className="p-2 font-semibold">
            <div className="flex items-center gap-2" style={{ userSelect: "none", cursor: "pointer" }}>
              <span
                onClick={(e) => {
                  e.stopPropagation()
                  toggleSelectTopic(topic.id)
                }}
              >
                {topicWords.length > 1 ? (
                  <>
                    {checkbox} [{selectedCount}]
                  </>
                ) : (
                  "  "
                )}
              </span>

              <span>
                ({topicWords.length})‚Æû {level1Head}: {topic.name}
              </span>
              <span>{topicWords.length > 0 ? (openLevel1.includes(topic.id) ? " üîΩ" : " ‚ñ∂Ô∏è") : ""}</span>
            </div>
          </td>
        </tr>
        {openLevel1.includes(topic.id) && topicWords.length > 0 && topicWords.map((item) => renderItemRow(item))}
      </React.Fragment>
    )
  }

  //  –§-—Ü—ñ—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ä—è–¥–∫–∞ —Ç–µ–º–∏
  const renderItemRow = (item) => (
    <tr key={item.id} className={isSelected(item.id) ? "bg-blue-100" : "hover:bg-gray-50"}>
      {/* <td style={{ width: 30, border: "1px solid #ccc", padding: "4px", textAlign: "center" }}> */}
      <td style={{ width: 30, borderBottom: "1px solid #ccc", padding: "4px", textAlign: "center" }}>
        <input
          type="checkbox"
          checked={isSelected(item.id)}
          onClick={(e) => e.stopPropagation()}
          onChange={() => toggleSelect(item.id)}
        />
      </td>

      {showOwnerMark && (
        <td style={{ width: 30, borderBottom: "1px solid #ccc", padding: "4px", textAlign: "center" }}>
          {item.user_id === user?.id && "üßë‚Äçüíª"}
        </td>
      )}

      {columns.map((col) => {
        const value = item[col.accessor]
        let content

        switch (col.type) {
          case "know":
            content = value ? "üëç" : ""
            break
          case "boolean":
            content = value ? "‚úî" : ""
            break
          case "integer":
            content = value != null ? Math.floor(Number(value)) : "-"
            break
          default:
            content = value ?? ""
        }

        return (
          <td
            key={col.accessor}
            style={{
              width: col.width,
              borderBottom: "1px solid #ccc",
              padding: "4px",
              ...(col.styleCell || {}),
            }}
          >
            <span style={col.styleCellText}>{content}</span>
          </td>
        )
      })}
    </tr>
  )

  return (
    <main className="p-1 max-w-4xl mx-auto">
      <h1 className="font-heading text-lg sm:text-xl lg:text-2xl font-bold mb-4 mx-auto w-fit">{title}</h1>

      {/* <div className="flex flex-wrap gap-2 items-center mb-4"> */}
      <div className="flex flex-wrap gap-1 sm:gap-2 items-center text-xs sm:text-sm lg:text-sm mb-3 font-body">
        {/* –î–û–î–ê–¢–ò, –ü–ï–†–ï–ö–õ–ê–°–¢–ò, –Ü–ú–ü–û–†–¢–£–í–ê–¢–ò ‚Äì –∑–∞–≤–∂–¥–∏ */}
        {user && selectedIds.length === 0 && (
          <>
            {onAdd && (
              <button
                onClick={onAdd}
                className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
              >
                ‚ûï–î–æ–¥–∞—Ç–∏
              </button>
            )}
            {onClickCsv && (
              <button
                onClick={onClickCsv}
                className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
                disabled={isPending}
              >
                üìÇ –Ü–º–ø–æ—Ä—Ç CSV
              </button>
            )}
          </>
        )}
        {/* –ó–ë–ï–†–ï–ì–¢–ò –ü–û–†–Ø–î–û–ö ‚Äì —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏ */}
        {/* {isOrderChanged && (
          <button onClick={saveOrder} className="bg-green-600 text-white px-4 py-0.5 rounded">
            üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä—è–¥–æ–∫
          </button>
        )} */}
        {/* 1 –í–ò–î–Ü–õ–ï–ù–ò–ô –†–Ø–î–û–ö */}
        {selectedIds.length === 1 &&
          (() => {
            const selectedWord = tData.find((w) => w.id === selectedIds[0])
            // console.log("TableView/selectedWord=", selectedWord)
            // const isOwner = user && selectedWord && selectedWord.user_id === user.id
            const isOwner = user && selectedWord && (selectedWord.user_id === user.id || user.role === "admin")

            return (
              <>
                {isOwner && (
                  <>
                    {onEdit && (
                      //   <button onClick={() => onEdit(selectedWord)} className="bg-blue-600 text-white px-4 py-0.5 rounded">
                      <button
                        onClick={() => {
                          const word = tData.find((w) => w.id === selectedIds[0])
                          if (word) onEdit(word) // <-- –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤–µ—Å—å –æ–±'—î–∫—Ç
                        }}
                        className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
                      >
                        ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                      </button>
                    )}
                    {onDelete && (
                      <button
                        onClick={() => {
                          const words = tData.filter((w) => selectedIds.includes(w.id))
                          if (words.length > 0) onDelete(words) // ‚úÖ –ø–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
                        }}
                        className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
                      >
                        üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                      </button>
                    )}
                  </>
                )}
                <button
                  onClick={startMoveMode}
                  //   onClick={() => setModal({ type: "move", word: selectedWord })}
                  className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
                >
                  üîÄ –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏
                </button>
              </>
            )
          })()}
        {/* –ë–ê–ì–ê–¢–û –í–ò–î–Ü–õ–ï–ù–ò–• */}
        {onDelete && selectedIds.length > 0 && (
          <button
            onClick={() => {
              const words = tData.filter((w) => selectedIds.includes(w.id))
              if (words.length > 0) onDelete(words) // ‚úÖ –ø–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
            }}
            className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
          >
            üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
          </button>
        )}
        {onThemeDownload && selectedIds.length > 0 && (
          <button
            onClick={() => {
              const words = tData.filter((w) => selectedIds.includes(w.id))
              onThemeDownload(words) // ‚úÖ –ø–µ—Ä–µ–¥–∞—î–º–æ –º–∞—Å–∏–≤ id
            }}
            className="bg-btBg hover:bg-btBgHov text-white px-2 py-0.5 rounded-full font-medium"
          >
            ‚¨áÔ∏è –ó–∞–≤–∞—Ç–∞–∂–∏—Ç–∏
          </button>
        )}
        {/* –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ/–≤–∏–¥—ñ–ª–µ–Ω—ñ */}
        {onTranslate && (
          <button
            onClick={() => {
              if (translate) {
                // –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥
                onTranslate("stop")
              } else if (selectedIds.length > 0) {
                // –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω—ñ
                const selectedWords = tData.filter((w) => selectedIds.includes(w.id))
                onTranslate(selectedWords)
              } else {
                // –ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ
                onTranslate(tData)
              }
            }}
            className={`px-2 py-0.5 rounded-full text-white font-medium ${
              translate ? "bg-btBg hover:bg-btBgHov" : "bg-btBg hover:bg-btBgHov"
            }`}
          >
            {translate
              ? "‚õî–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥"
              : selectedIds.length > 0
              ? "üåê–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤–∏–¥—ñ–ª–µ–Ω—ñ‚úîÔ∏è"
              : "üåê–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ"}{" "}
          </button>
        )}
      </div>
      {/* 2–∏–π —Ä—è–¥–æ–∫ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ—é/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
      {message && (
        <p className="mb-4 text-green-700 font-medium" role="alert">
          {message}
        </p>
      )}
      {/* –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ—é */}
      <div className="flex gap-2 items-center">
        <span className="text-gray-700">üìÑ–í—Å—å–æ–≥–æ –∑–∞–ø: {tData.length} </span>

        <button
          onClick={() => (selectedIds.length === tData.length ? clearSelection() : selectAll())}
          className="text-sm px-2 py-1 rounded border"
        >
          {selectedIds.length === tData.length ? "‚òë –ó–Ω—è—Ç–∏ –≤—Å—ñ" : "‚òê –í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ"}
        </button>
        {selectedIds.length > 0 && (
          <span className="text-blue-700">
            –í–∏–¥—ñ–ª–µ–Ω–æ: {level0Head} {selectedIds.length}
          </span>
        )}
        {selectedLevel1.length > 0 && (
          // <span className="text-green-700">–í–∏–¥—ñ–ª–µ–Ω–æ {level1Head} : {selectedLevel1.length}</span>
          <span className="text-green-700">
            {level1Head} : {selectedLevel1.length}
          </span>
        )}
      </div>
      {/*  */}
      <div ref={tableContainerRef} className="max-h-[500px] overflow-auto border border-gray-300 rounded shadow-sm">
        {/* <table className="w-full border-collapse text-xs sm:text-sm lg:text-sm font-body"> */}
        <table className="table-fixed border-collapse text-xs sm:text-sm lg:text-sm font-body">
          <thead className="bg-gray-100 sticky top-0 z-10">
            <tr>
              {showOwnerMark && <th style={{ width: 30, border: "1px solid #ccc", padding: "4px" }}>‚úîÔ∏è</th>}
              {showOwnerMark && <th style={{ width: 30, border: "1px solid #ccc", padding: "4px" }}>üë§</th>}
              {columns.map((col) => (
                <th
                  key={col.accessor}
                  style={{
                    width: col.width,
                    border: "1px solid #ccc",
                    padding: "4px",
                  }}
                >
                  {col.label}
                </th>
              ))}
            </tr>
          </thead>

          {/* –û—Å–Ω–æ–≤–Ω–µ —Ç—ñ–ª–æ (<tbody>) */}

          <tbody>
            {/* –ö–æ–ª–∏ —î level2 */}
            {level2?.length > 0 &&
              level2.map((section) => {
                const sectionLevel1 = level1?.filter((t) => t[level2Id] === section.id) || []

                return (
                  //
                  <React.Fragment key={section.id}>
                    <tr
                      onClick={() => toggleLevel2(section.id)}
                      className="bg-gray-300 cursor-pointer hover:bg-gray-400"
                    >
                      <td colSpan={showOwnerMark ? columns.length + 2 : columns.length} className="p-2 font-bold">
                        {level2Head}: {section.name} ({sectionLevel1.length})
                        {/* {openLevel2.includes(section.id) ? " üîΩ" : " ‚ñ∂Ô∏è"} */}
                        {/* {sectionLevel1.length > 0 ? (openLevel2.includes(section.id) ? " üîΩ" : " ‚ñ∂Ô∏è") : " ‚ñ∂Ô∏è"} */}
                        {sectionLevel1.length > 0 ? (openLevel2.includes(section.id) ? " üîΩ" : " ‚ñ∂Ô∏è") : ""}
                      </td>
                    </tr>

                    {openLevel2.includes(section.id) &&
                      sectionLevel1.map((topic) => {
                        const topicWords = tData.filter((w) => w[level1Id] === topic.id)
                        return renderTopic(topic, topicWords)
                      })}
                  </React.Fragment>
                )
              })}
            {/* –ö–æ–ª–∏ —î —Ç—ñ–ª—å–∫–∏ level1 */}
            {(!level2 || level2.length === 0) &&
              level1?.length > 0 &&
              level1.map((topic) => {
                const topicWords = tData?.filter((w) => w[level1Id] === topic.id) || []
                return renderTopic(topic, topicWords)
              })}
            {/* –ö–æ–ª–∏ –Ω–µ–º–∞—î –Ω—ñ level1, –Ω—ñ level2 ‚Äî –ø–ª–æ—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—è */}
            {(!level2 || level2.length === 0) &&
              (!level1 || level1.length === 0) &&
              //   data.map((item) => renderFlatRow(item))}
              data.map((item) => renderItemRow(item))}
          </tbody>
        </table>
      </div>

      <MoveRowModal
        open={moveMode}
        onClose={() => setMoveMode(false)}
        moveInfo={moveInfo}
        moveSelectedRow={moveSelectedRow}
      />
    </main>
  )
}
