// components/TableView.js
// –ú–æ—è –ø–µ—Ä–µ—Ä–æ–±–∫–∞ –∑ words/page.js

import React, { useEffect, useState, useTransition, useRef } from "react"
// import { useAuth } from "@/app/context/AuthContext"
import { useSession } from "next-auth/react"
import MoveRowModal from "@/app/components/tables/MoveRowModal"

export default function TableView({
  data,
  dataLevel1,
  dataLevel2,
  level1Head = "–¢–µ–º–∞",
  level2Head = "–°–µ–∫—Ü—ñ—è",
  columns,
  title,
  onAdd,
  onEdit,
  onDelete,
  onClickCsv,
  onTranslate,
  translate,

  sortField = "pn",
  isPending, //–î–õ—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ —ñ–º–ø–æ—Ä—Ç –ø–æ–∫–∏–π–¥–µ —ñ–º–ø–æ—Ä—Ç
}) {
  // prors
  const showOwnerMark = true

//   const { user } = useAuth()
   const { data: session, status } = useSession()
   const user = session?.user
  const [tData, setTData] = useState([])
  const [topics, setTopics] = useState([])
  const [sections, setSections] = useState([])
  const [pn, setPn] = useState("")
  const [message, setMessage] = useState("")
  const [isOrderChanged, setIsOrderChanged] = useState(false) //–î–ª—è –ø–æ—Ä–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É –ø–æ—Ä—è–¥–∫—É
  const [selectedIds, setSelectedIds] = useState([]) //
  //   –î–ª—è –º–æ–¥–∞–ª–∫–∏ —Å—Ç—Ä—ñ–ª–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  const [moveMode, setMoveMode] = useState(false)
  const [moveInfo, setMoveInfo] = useState(null) // { idx, total }
  const tableContainerRef = useRef(null) //–î–ª—è —Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ****
  const rowRefs = useRef([]) //–î–ª—è —Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ
  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø(—Å–µ–∫—Ü—ñ–π)
  const [openSections, setOpenSections] = useState([])
  const [openTopics, setOpenTopics] = useState(topics.map((t) => t.id)) // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ
  //   console.log("TableView/data=", data)
  //   console.log("TableView/dataLevel1=", dataLevel1)
  //   console.log("TableView/dataLevel2=", dataLevel2)

  useEffect(() => {
    setTData(data || [])
    setTopics(dataLevel1 || [])
    setSections(dataLevel2 || [])
    setOpenTopics((dataLevel1 || []).map((t) => t.id))
  }, [data, dataLevel2, dataLevel1])

  //   console.log("TableView/tData=", tData)
  //   console.log("TableView/topics=", topics)
  //   console.log("TableView/sections=", sections)

  //GPT/ –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤

  const saveOrder = async () => {
    if (!user) return

    if (user.role !== "admin") {
      alert("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ —É—Å—ñ—Ö —Å–ª—ñ–≤ –º–æ–∂–µ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
      return
    }

    try {
      for (let i = 0; i < tData.length; i++) {
        const w = tData[i]
        const newPn = i + 1
        if (w.pn !== newPn) {
          await updateWordPn(w.id, newPn, user)
        }
      }
      setMessage("‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
      setTimeout(() => setMessage(""), 2000)
      setIsOrderChanged(false)
      loadWords()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  const updatePNs = (updatedWords) => {
    const newWords = updatedWords.map((w, i) => ({
      ...w,
      pn: i + 1, // –æ–Ω–æ–≤–ª—é—î–º–æ pn
    }))
    setTData(newWords)
    setIsOrderChanged(true) // ‚ö†Ô∏è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –∑–º—ñ–Ω
  }

  const isOwnerOrAdmin = (w) => user && (user.role === "admin" || user.id === w.user_id)

  //–î–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∞–±–æ –ø—Ä–∏–∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤–∫–ª–∞–¥–∫–∏
  useEffect(() => {
    const handleBeforeUnload = (e) => {
      if (isOrderChanged) {
        e.preventDefault()
        e.returnValue = "" // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –¥–µ—è–∫–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
      }
    }

    window.addEventListener("beforeunload", handleBeforeUnload)

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload)
    }
  }, [isOrderChanged])

  const deleteSelected = async () => {
    if (!user) {
      alert("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è, —â–æ–± –≤–∏–¥–∞–ª—è—Ç–∏ —Å–ª–æ–≤–∞")
      return
    }
    if (selectedIds.length === 0) return
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ª–æ–≤–∞ –∑–∞ id
    const selectedWords = tData.filter((w) => selectedIds.includes(w.id))

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ —Å–ª–æ–≤–∞ –Ω–∞–ª–µ–∂–∞—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const ownWords = selectedWords.filter((w) => user.role === "admin" || w.user_id === user.id)
    const ownIds = ownWords.map((w) => w.id)
    const othersCount = selectedWords.length - ownWords.length

    if (ownIds.length === 0) {
      // –ù–µ–º–∞ —Å–≤–æ—ó—Ö —Å–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
      alert("–£—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –∑–∞–ø–∏—Å–∏ –Ω–∞–ª–µ–∂–∞—Ç—å —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º. –í–∏–¥–∞–ª—è—Ç–∏ –Ω—ñ—á–æ–≥–æ.")
      return
    }

    if (othersCount > 0) {
      const confirmed = confirm(
        `–£ –≤–∏–±–æ—Ä—ñ —î ${othersCount} —á—É–∂–∏—Ö —Å–ª—ñ–≤. –í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—à–µ –≤–∞—à—ñ (${ownIds.length})? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—ó, –∞–±–æ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏.`
      )
      if (!confirmed) return
    } else {
      const confirmed = confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${ownIds.length} —Å–ª—ñ–≤?`)
      if (!confirmed) return
    }

    try {
      await deleteWords(ownIds, user)
      setMessage(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${ownIds.length} —Å–ª—ñ–≤`)
      clearSelection()
      loadWords()
    } catch (err) {
      setMessage("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: " + err.message)
    }
  }

  const isSelected = (id) => selectedIds.includes(id)

  const toggleSelect = (id) => {
    setSelectedIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]))
  }

  const selectAll = () => {
    setSelectedIds(tData.map((w) => w.id))
  }

  const clearSelection = () => {
    setSelectedIds([])
  }
  //   –î–ª—è –º–æ–¥–∞–ª–∫–∏ —Å—Ç—Ä—ñ–ª–æ–∫ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
  const startMoveMode = () => {
    if (selectedIds.length !== 1) return

    const id = selectedIds[0]
    const idx = tData.findIndex((w) => w.id === id)
    if (idx === -1) return

    setMoveInfo({ idx, total: tData.length })
    scrollRowIntoView(idx) //–î–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª—É
    setMoveMode(true)
  }
  //   –î–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª—É –ø—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—ñ
  const scrollRowIntoView = (rowIndex) => {
    const container = document.querySelector(".table-container") // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ overflow-auto, —â–æ –æ–±–≥–æ—Ä—Ç–∞—î —Ç–∞–±–ª–∏—Ü—é
    if (!container) return

    const rows = container.querySelectorAll("tbody tr")
    if (!rows[rowIndex]) return

    const row = rows[rowIndex]

    const containerTop = container.scrollTop
    const containerBottom = containerTop + container.clientHeight

    const rowTop = row.offsetTop
    const rowBottom = rowTop + row.offsetHeight

    if (rowTop < containerTop) {
      // —Ä—è–¥–æ–∫ –≤–∏—â–µ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ, —Å–∫—Ä–æ–ª–∏–º–æ –Ω–∞–≤–µ—Ä—Ö, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –π–æ–≥–æ
      container.scrollTop = rowTop
    } else if (rowBottom > containerBottom) {
      // —Ä—è–¥–æ–∫ –Ω–∏–∂—á–µ –≤–∏–¥–∏–º–æ—ó –æ–±–ª–∞—Å—Ç—ñ, —Å–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑
      container.scrollTop = rowBottom - container.clientHeight
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –≤ –º–∞—Å–∏–≤—ñ tData –≤ —Å—Ç–∞–Ω—ñ:
  const moveSelectedRow = (direction) => {
    if (!moveInfo) return

    const { idx } = moveInfo
    const topicId = tData[idx].topic_id

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ü—å–æ–≥–æ topic
    const topicWords = tData.filter((w) => w.topic_id === topicId)
    const topicIndexes = topicWords.map((w) => tData.findIndex((x) => x.id === w.id))
    const localIdx = topicIndexes.indexOf(idx)

    let newIdx = idx

    // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –≥—Ä—É–ø–∏
    if (direction === "up" && localIdx > 0) {
      newIdx = topicIndexes[localIdx - 1]
    } else if (direction === "down" && localIdx < topicIndexes.length - 1) {
      newIdx = topicIndexes[localIdx + 1]
    }

    if (newIdx === idx) return // –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É —Ç–∞ –º—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏
    let updatedWords = [...tData]
    ;[updatedWords[idx], updatedWords[newIdx]] = [updatedWords[newIdx], updatedWords[idx]]

    // –û–Ω–æ–≤–ª—é—î–º–æ pn
    const newWordsWithPN = updatedWords.map((w, i) => ({ ...w, pn: i + 1 }))

    setTData(newWordsWithPN)
    setIsOrderChanged(true)

    // –ù–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ: –æ–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ idx, —ñ–Ω—à—ñ –ø–æ–ª—è –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è
    setMoveInfo((prev) => ({ ...prev, idx: newIdx }))

    // –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    if (rowRefs.current[newIdx]) {
      rowRefs.current[newIdx].scrollIntoView({
        behavior: "smooth",
        block: "nearest",
      })
    }
  }

  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø
  const toggleSection = (sectionId) => {
    setOpenSections((prev) => (prev.includes(sectionId) ? prev.filter((id) => id !== sectionId) : [...prev, sectionId]))
  }
  //   –î–ª—è —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è –≥—Ä—É–ø
  const toggleTopic = (topicId) => {
    setOpenTopics((prev) => (prev.includes(topicId) ? prev.filter((id) => id !== topicId) : [...prev, topicId]))
  }

  return (
    <main className="p-6 max-w-4xl mx-auto">
      {/* <h1 className="text-2xl font-bold mb-6">–°–ª–æ–≤–∞ TW</h1> */}
      <h1 className="text-2xl font-bold mb-6">{title}</h1>
      <div className="flex flex-wrap gap-2 items-center mb-4">
        {/* –î–û–î–ê–¢–ò, –ü–ï–†–ï–ö–õ–ê–°–¢–ò, –Ü–ú–ü–û–†–¢–£–í–ê–¢–ò ‚Äì –∑–∞–≤–∂–¥–∏ */}
        {user && selectedIds.length === 0 && (
          <>
            {onAdd && (
              <button onClick={onAdd} className="bg-blue-600 text-white px-4 py-2 rounded">
                ‚ûï –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ
              </button>
            )}
            {onClickCsv && (
              <button onClick={onClickCsv} className="bg-purple-600 text-white px-4 py-2 rounded" disabled={isPending}>
                üìÇ –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ CSV
              </button>
            )}
            {onTranslate && (
              <button
                onClick={onTranslate}
                className={`px-4 py-2 rounded text-white ${translate ? "bg-red-600" : "bg-indigo-600"}`}
              >
                {translate ? "‚è∏ –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥" : "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –ø–µ—Ä–µ–∫–ª–∞–¥—É"}
              </button>
            )}
          </>
        )}

        {/* –ó–ë–ï–†–ï–ì–¢–ò –ü–û–†–Ø–î–û–ö ‚Äì —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–ª–∏ –∑–º—ñ–Ω–∏ */}
        {isOrderChanged && (
          <button onClick={saveOrder} className="bg-green-600 text-white px-4 py-2 rounded">
            üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä—è–¥–æ–∫
          </button>
        )}

        {/* 1 –í–ò–î–Ü–õ–ï–ù–ò–ô –†–Ø–î–û–ö */}
        {selectedIds.length === 1 &&
          (() => {
            const selectedWord = tData.find((w) => w.id === selectedIds[0])
            const isOwner = user && selectedWord && selectedWord.user_id === user.id

            return (
              <>
                {isOwner && (
                  <>
                    {onEdit && (
                      <button onClick={() => onEdit(selectedWord)} className="bg-blue-600 text-white px-4 py-2 rounded">
                        ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                      </button>
                    )}
                    {onDelete && (
                      <button
                        onClick={() => onDelete(selectedWord)}
                        className="bg-red-600 text-white px-4 py-2 rounded"
                      >
                        üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                      </button>
                    )}
                  </>
                )}
                <button
                  onClick={startMoveMode}
                  //   onClick={() => setModal({ type: "move", word: selectedWord })}
                  className="bg-yellow-600 text-white px-4 py-2 rounded"
                >
                  üîÄ –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏
                </button>
              </>
            )
          })()}

        {/* –ë–ê–ì–ê–¢–û –í–ò–î–Ü–õ–ï–ù–ò–• */}
        {selectedIds.length > 1 && (
          <button onClick={deleteSelected} className="bg-red-600 text-white px-4 py-2 rounded">
            üóë –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ
          </button>
        )}
      </div>
      {/* –î—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É –¥–ª—è csv */}
      {message && (
        <p className="mb-4 text-green-700 font-medium" role="alert">
          {message}
        </p>
      )}
      {/* –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –Ω–∞–¥ —Ç–∞–±–ª–∏—Ü–µ—é */}
      <div className="flex gap-2 items-center">
        <span className="text-gray-700">üìÑ–í—Å—å–æ–≥–æ –∑–∞–ø: {tData.length} </span>

        <button
          onClick={() => (selectedIds.length === tData.length ? clearSelection() : selectAll())}
          className="text-sm px-2 py-1 rounded border"
        >
          {selectedIds.length === tData.length ? "‚òë –ó–Ω—è—Ç–∏ –≤—Å—ñ" : "‚òê –í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ"}
          {/* {selectedIds.length === tData.length ? "‚òë" : "‚òê"} */}
        </button>
        {selectedIds.length > 0 && <span className="text-blue-700">–í–∏–¥—ñ–ª–µ–Ω–æ: {selectedIds.length}</span>}
      </div>
      {/*  */}
      <div ref={tableContainerRef} className="max-h-[500px] overflow-auto border border-gray-300 rounded shadow-sm">
        <table className="w-full border-collapse">
          <thead className="bg-gray-100 sticky top-0 z-10">
            <tr>
              {showOwnerMark && <th style={{ width: 30, border: "1px solid #ccc", padding: "4px" }}>üë§</th>}
              {columns.map((col) => (
                <th
                  key={col.accessor}
                  style={{
                    width: col.width,
                    border: "1px solid #ccc",
                    padding: "4px",
                  }}
                >
                  {col.label}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {sections.map((section) => {
              const sectionTopics = topics.filter((t) => t.section_id === section.id)
              const sectionWords = tData.filter((w) => sectionTopics.some((t) => t.id === w.topic_id))
              if (sectionWords.length === 0) return null

              return (
                <React.Fragment key={section.id}>
                  <tr
                    onClick={() => toggleSection(section.id)}
                    className="bg-gray-300 cursor-pointer hover:bg-gray-400"
                  >
                    <td colSpan={showOwnerMark ? columns.length + 1 : columns.length} className="p-2 font-bold">
                      {level2Head}
                      {": "}
                      {section.name} ({sectionWords.length}){openSections.includes(section.id) ? " üîΩ" : " ‚ñ∂Ô∏è"}
                    </td>
                  </tr>

                  {openSections.includes(section.id) &&
                    sectionTopics.map((topic) => {
                      const topicWords = tData.filter((w) => w.topic_id === topic.id)
                      if (topicWords.length === 0) return null

                      return (
                        <React.Fragment key={topic.id}>
                          <tr
                            onClick={() => toggleTopic(topic.id)}
                            className="bg-gray-200 cursor-pointer hover:bg-gray-300"
                          >
                            <td
                              colSpan={showOwnerMark ? columns.length + 1 : columns.length}
                              className="p-2 font-semibold"
                            >
                              ‚Æû {level1Head}
                              {": "}
                              {topic.name} {topicWords.length}
                              {openTopics.includes(topic.id) ? " üîΩ" : " ‚ñ∂Ô∏è"}
                            </td>
                          </tr>

                          {openTopics.includes(topic.id) &&
                            topicWords.map((item, index) => (
                              <tr
                                key={item.id}
                                ref={(el) => (rowRefs.current[index] = el)}
                                onClick={() => toggleSelect(item.id)}
                                className={`cursor-pointer ${isSelected(item.id) ? "bg-blue-100" : "hover:bg-gray-50"}`}
                              >
                                {showOwnerMark && (
                                  <td
                                    style={{
                                      width: 30,
                                      border: "1px solid #ccc",
                                      padding: "4px",
                                      textAlign: "center",
                                    }}
                                  >
                                    {item.user_id === user?.id && "üßë‚Äçüíª"}
                                  </td>
                                )}
                                {columns.map((col) => {
                                  const value = item[col.accessor]
                                  let content

                                  switch (col.type) {
                                    case "know":
                                      content = value ? "üëç" : ""
                                      break
                                    case "boolean":
                                      content = value ? "‚úî" : ""
                                      break
                                    case "integer":
                                      content = value != null ? Math.floor(Number(value)) : "-"
                                      break
                                    default:
                                      content = value ?? ""
                                  }
                                  return (
                                    <td
                                      key={col.accessor}
                                      //   style={{
                                      //     width: col.width,
                                      //     border: "1px solid #ccc",
                                      //     padding: "4px",
                                      //     ...(col.styleCell || {}),
                                      //   }}
                                      style={{
                                        ...{
                                          width: col.width,
                                          border: "1px solid #ccc",
                                          padding: "4px",
                                        },
                                        ...(col.styleCell || {}),
                                      }}
                                    >
                                      <span style={col.styleCellText}>{content}</span>
                                    </td>
                                  )
                                })}
                              </tr>
                            ))}
                        </React.Fragment>
                      )
                    })}
                </React.Fragment>
              )
            })}
          </tbody>
        </table>
      </div>

      <MoveRowModal
        open={moveMode}
        onClose={() => setMoveMode(false)}
        moveInfo={moveInfo}
        moveSelectedRow={moveSelectedRow}
      />
    </main>
  )
}
